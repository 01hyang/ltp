# Copyright 1998, 1999, 2000 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  

# Please email any bugs, comments, and/or additions to this file to:
# bug-gdb@prep.ai.mit.edu

# This file was written by Elena Zannoni (ezannoni@cygnus.com)

# This test deals with calling functions which have strings as parameters.
# it plays around with constant strings.
# the corresponding source file is call-strs.c
#

set testfile [lindex $argv 0]
set timeout 3
source "gdb.base/gdb_fun.exp"
spawn gdb
gdb_start
send "dir gdb.base/ \n"
send "file $testfile \n"

runto main
expect {
        -re ".*$gdb_prompt $" {}
        timeout { fail "start program (timeout)" }
}

#step
send "step\n"
expect {
        -re ".*strcpy\\(buf, \"test string\"\\);.*$gdb_prompt $" {pass "step after assignment to s"}
        -re ".*$gdb_prompt $" { fail "step after assignment to s" }
        timeout { fail "step after assignment to s (timeout)" }
    }


#step
send "next\n"
expect {
        -re ".*str_func\\(\"abcd\", \"efgh\", \"ijkl\", \"mnop\", \"qrst\", \"uvwx\", \"yz12\"\\);.*$gdb_prompt $" {pass "next over strcpy"}
        -re ".*$gdb_prompt $" { fail "next over strcpy" }
        timeout { fail "next over strcpy (timeout)" }
    }

#print buf
send "print buf\n"
expect {
    -re ".*\"test string\".*repeats 88 times.*$gdb_prompt $" {
        pass "print buf"
      }
    -re ".*$gdb_prompt $" { fail "print buf" }
    timeout           { fail "(timeout) print buf" }
  }


#print s
send "print s\n"
expect {
    -re ".*=.* \"test string\".*$gdb_prompt $" {
        pass "print s"
      }
    -re ".*$gdb_prompt $" { fail "print s" }
    timeout           { fail "(timeout) print sum_array_print(10, *list1, *list2, *list3, *list4)" }
  }


#print str_func1(s)
#if ![gdb_skip_stdio_test "print str_func1(s)"] {
    send "print  str_func1(s)\n"
    expect {
	-re "first string arg is: test string.*\"test string\".*$gdb_prompt $" {
	    pass "print str_func1(s)"
	}
	-re ".*$gdb_prompt $" { fail "print str_func1(s)" }
	timeout               { fail "(timeout) print str_func1(s)" }
    }
#}


#print str_func1("test string")
#if ![gdb_skip_stdio_test "print str_func1(teststring)"] {
    send "print  str_func1(\"test string\")\n"
    expect {
	-re "first string arg is: test string.*\"test string\".*$gdb_prompt $" {
	    pass "print str_func1(\"test string\")"
	}
	-re ".*$gdb_prompt $" { fail "print str_func1(\"test string\")" }
	timeout     { fail "(timeout) print str_func1(\"test string\")" }
    }
#}

#call str_func1(s)
#if ![gdb_skip_stdio_test "call str_func1(s)"] {
    send "call  str_func1(s)\n"
    expect {
	-re "first string arg is: test string.*\"test string\".*$gdb_prompt $" {
	    pass "call str_func1(s)"
	}
	-re ".*$gdb_prompt $" { fail "call str_func1(s)" }
	timeout               { fail "(timeout) call str_func1(s)" }
    }
#}

#call str_func1("test string")
#if ![gdb_skip_stdio_test "call str_func1 (...)"] {
    send "call  str_func1(\"test string\")\n"
    expect {
	-re "first string arg is: test string.*\"test string\".*$gdb_prompt $" {
	    pass "call str_func1(\"test string\")"
	}
	-re ".*$gdb_prompt $" { fail "call str_func1(\"test string\")" }
	timeout     { fail "(timeout) call str_func1(\"test string\")" }
    }
#}

#print str_func1(buf)
#if ![gdb_skip_stdio_test "print str_func1(buf)"] {
    send "print  str_func1(buf)\n"
    expect {
	-re "first string arg is: test string.*\"test string\".*$gdb_prompt $" {
	    pass "print str_func1(buf)"
	}
	-re ".*$gdb_prompt $" { fail "print str_func1(buf)" }
	timeout               { fail "(timeout) print str_func1(buf)" }
    }
#}

#call str_func1(buf)
#if ![gdb_skip_stdio_test "call str_func1(buf)"] {
    send "call str_func1(buf)\n"
    expect {
	-re "first string arg is: test string.*\"test string\".*$gdb_prompt $" {
	    pass "call str_func1(buf)"
	}
	-re ".*$gdb_prompt $" { fail "call str_func1(buf)" }
	timeout               { fail "(timeout) call str_func1(buf)" }
    }
#}

#print str_func("a","b","c","d","e","f","g")
#if ![gdb_skip_stdio_test "print str_func(a,b,c,d,e,f,g)"] {
    send "print  str_func(\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\")\n"
    expect {
	-re "first string arg is: a\[ \t\r\n\]+second string arg is: b\[ \t\r\n\]+third string arg is: c\[ \t\r\n\]+fourth string arg is: d\[ \t\r\n\]+fifth string arg is: e\[ \t\r\n\]+sixth string arg is: f\[ \t\r\n\]+seventh string arg is: g\[ \t\r\n\]+.*=.* \"abcdefg\".*$gdb_prompt $" {
	    pass "print str_func(\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\")"
	}
	-re ".*$gdb_prompt $" { fail "print str_func(\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\")" }
	timeout           { fail "(timeout) print str_func(\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\")" }
    }
#}

#call str_func("a","b","c","d","e","f","g")
#if ![gdb_skip_stdio_test "call str_func(a,b,c,d,e,f,g)"] {
    send "call  str_func(\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\")\n"
    expect {
	-re "first string arg is: a\[ \t\r\n\]+second string arg is: b\[ \t\r\n\]+third string arg is: c\[ \t\r\n\]+fourth string arg is: d\[ \t\r\n\]+fifth string arg is: e\[ \t\r\n\]+sixth string arg is: f\[ \t\r\n\]+seventh string arg is: g\[ \t\r\n\]+.*=.* \"abcdefg\".*$gdb_prompt $" {
	    pass "call str_func(\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\")"
	}
	-re ".*$gdb_prompt $" { fail "call str_func(\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\")" }
	timeout           { fail "(timeout) call str_func(\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\")" }
    }
#}

#print str_func(s,s,s,s,s,s,s)
#if ![gdb_skip_stdio_test "print str_func(s,s,s,s,s,s,s,s)"] {
    send "print  str_func(s,s,s,s,s,s,s)\n"
    expect {
	-re "first string arg is: test string\[ \t\r\n\]+second string arg is: test string\[ \t\r\n\]+third string arg is: test string\[ \t\r\n\]+fourth string arg is: test string\[ \t\r\n\]+fifth string arg is: test string\[ \t\r\n\]+sixth string arg is: test string\[ \t\r\n\]+seventh string arg is: test string\[ \t\r\n\]+.*\"test stringtest stringtest stringtest stringtest stringtest stringtest string\".*$gdb_prompt $" {
	    pass "print str_func(s,s,s,s,s,s,s)"
	}
	-re ".*$gdb_prompt $" { fail "print str_func(s,s,s,s,s,s,s)" }
	timeout     { fail "(timeout) print str_func(s,s,s,s,s,s,s)" }
    }
#}

#call str_func(s,s,s,s,s,s,s)
#if ![gdb_skip_stdio_test "call str_func(s,s,s,s,s,s,s,s)"] {
    send "call  str_func(s,s,s,s,s,s,s)\n"
    expect {
	-re "first string arg is: test string\[ \t\r\n\]+second string arg is: test string\[ \t\r\n\]+third string arg is: test string\[ \t\r\n\]+fourth string arg is: test string\[ \t\r\n\]+fifth string arg is: test string\[ \t\r\n\]+sixth string arg is: test string\[ \t\r\n\]+seventh string arg is: test string\[ \t\r\n\]+.*\"test stringtest stringtest stringtest stringtest stringtest stringtest string\".*$gdb_prompt $" {
	    pass "call str_func(s,s,s,s,s,s,s)"
	}
	-re ".*$gdb_prompt $" { fail "call str_func(s,s,s,s,s,s,s)" }
	timeout               { fail "(timeout) call str_func(s,s,s,s,s,s,s)" }
    }
#}

send "quit\r"
