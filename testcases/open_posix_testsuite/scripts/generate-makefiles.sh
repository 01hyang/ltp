#!/bin/sh
#
# Generate generic POSIX compliant Makefiles.
#
# This means that there's a lot of unnecessary text (when using BSD or GNU
# make, as I'm sure there are in other variants), and a lack of modularity,
# but as long as you follow the criterion set in locate-test, then the
# end-result for modifying and/or adding tests can be achieved by merely
# rerunning this script.
#
# This script will remain around until (hopefully someday) POSIX make
# becomes less braindead.
#
# See COPYING for more details.
#
# Garrett Cooper, June 2010
#

AUTHORDATE=$(grep "Garrett Cooper" "$0" | head -n 1)
export PATH="$PATH:$(dirname "$0")"

generate_locate_test_makefile() {

	local maketype=$1; shift

	echo "Generating $maketype Makefiles"

	locate-test --$maketype | sed -e 's,^./,,g' > make-gen.$maketype

	generate_makefile make-gen.$maketype $*

	rm -f make-gen.$maketype

}

generate_makefile() {

	local make_target_prereq_cache=
	local prereq_cache=

	local make_gen_list=$1; shift
	local suffix=$1; shift
	local compiler_args=$*

	while read filename; do

		prereq_dir=$(dirname "$filename")

		# First run.
		if [ "$prereq_cache_dir" = "" ] ; then
			makefile="$prereq_dir/Makefile"
			prereq_cache_dir="$prereq_dir"
		elif [ "$prereq_cache_dir" != "$prereq_dir" ]; then

			# Add all non-.c files to $make_target_prereq_cache.
			for prereq in $prereq_cache; do
				if echo "$prereq" | grep -q '.test$'; then
					if [ "$make_target_prereq_cache" != "" ]; then
						make_target_prereq_cache="$make_target_prereq_cache "
					fi
					make_target_prereq_cache="$make_target_prereq_cache$prereq"
				fi
			done

			# Print out the Makefile header for the first round.
			if [ ! -f "$makefile.1" ]; then

				# The empty set for {INSTALL,MAKE}_TARGETS is
				# because some versions of make (like gmake)
				# must predefine the variables beforehand in
				# order for the value to be expanded properly
				# in the make rules.
				cat > "$makefile.1" <<EOF
#
# Automatically generated by $(basename "$0") -- DO NOT EDIT.
#
# Restrictions for $(basename "$0") apply to this file. See COPYING for more
# details.
#
# $AUTHORDATE
#

# Path variables.
top_srcdir?=		$(echo "$prereq_cache_dir" | sed -E -e 's,[^/]+,\.\.,g')
subdir=			$prereq_cache_dir
srcdir=			\$(top_srcdir)/\$(subdir)

EXEC_PREFIX=		$EXEC_PREFIX
INSTALL_DIR=		\$(DESTDIR)/\$(EXEC_PREFIX)/\$(subdir)

# Build variables
CFLAGS+=		-I\$(top_srcdir)/include

# XXX: for testfrmw.c -- needs to be moved into a library.
CFLAGS+=		-I\$(srcdir)

EOF

				for var in CFLAGS LDFLAGS LDLIBS; do

					if [ -f "$prereq_cache_dir/$var" ]; then

						cat >> "$makefile.1" <<EOF
$var+=			`grep -v '^#' 2>/dev/null $prereq_cache_dir/$var`

EOF
					fi

				done

				cat > "$makefile.3" <<EOF

all: \$(MAKE_TARGETS)

clean:
	rm -f \$(MAKE_TARGETS) *.core

install: \$(INSTALL_DIR)
	for i in \$(INSTALL_TARGETS); do \\
		install \$\$i \$(INSTALL_DIR)/\$\$i;\\
	done

test: all
	\$(top_srcdir)/scripts/run.sh \$(MAKE_TARGETS)

\$(INSTALL_DIR):
	mkdir -p \$@

EOF
			fi

			cat >> "$makefile.2" <<EOF
INSTALL_TARGETS+=	${prereq_cache}

MAKE_TARGETS+=		${make_target_prereq_cache}

EOF

			# Produce _awesome_ target rules for everything that
			# needs it.
			for prereq in ${make_target_prereq_cache}; do

				test_name=$(echo "$prereq" | sed -e "s,\.$suffix,,")
				c_file="$test_name.c"

				case "$suffix" in
				run-test)
					grep -q 'main' "$prereq_cache_dir/$c_file" || echo >&2 "$prereq_cache_dir/$c_file should be test."
					;;
				test)
					grep -q 'main' "$prereq_cache_dir/$c_file" && echo >&2 "$prereq_cache_dir/$c_file should be run-test."
					;;
				esac

				COMPILE_STR="\$(CC) $compiler_args \$(CFLAGS) \$(LDFLAGS) -o \$@ \$(srcdir)/$c_file \$(LDLIBS)"

				cat >> "$makefile.4" <<EOF

$prereq: \$(srcdir)/$c_file
	@if $COMPILE_STR >logfile.\$\$\$\$ 2>&1; then \\
		 echo "$prereq_cache_dir/$test_name compile PASSED"; \\
		 echo "$prereq_cache_dir/$test_name compile PASSED" >> \$(LOGFILE); \\
	else \\
		 echo "$prereq_cache_dir/$test_name compile FAILED"; \\
		(echo "$prereq_cache_dir/$test_name compile FAILED"; cat logfile.\$\$\$\$) >> \$(LOGFILE); \\
	fi; \\
	rm -f logfile.\$\$\$\$
EOF

			done

			# Prep for the next round..
			make_target_prereq_cache=
			makefile="$prereq_dir/Makefile"
			prereq_cache=
			prereq_cache_dir="$prereq_dir"

		fi

		# Cache the entries to punt out all of the data at
		# once for a single Makefile.
		if [ "$prereq_cache" != "" ] ; then
			prereq_cache="$prereq_cache "
		fi
		prereq_cache="$prereq_cache$(basename "$filename" | sed "s,.c\$,.$suffix,g")"

	done < $make_gen_list

}

DEFAULT_PREFIX=

if uname -a | grep -i linux
then
	DEFAULT_PREFIX=/opt
else
	DEFAULT_PREFIX=/usr/local
fi

PREFIX=${PREFIX:=$DEFAULT_PREFIX/openposix_testsuite}
EXEC_PREFIX="${PREFIX}/bin"

# For the generic cases.
generate_locate_test_makefile buildonly "test" -c
generate_locate_test_makefile runnable "run-test"

find . -name Makefile.1 -exec dirname {} \; | while read dir; do
	cat $dir/Makefile.1 $dir/Makefile.2 $dir/Makefile.3 $dir/Makefile.4 > $dir/Makefile
	rm $dir/Makefile.1 $dir/Makefile.2 $dir/Makefile.3 $dir/Makefile.4
done
