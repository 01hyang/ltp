#!/bin/sh
#
# Generate generic POSIX compliant Makefiles.
#
# This means that there's a lot of unnecessary text (when using BSD or GNU
# make, as I'm sure there are in other variants), and a lack of modularity,
# but as long as you follow the criterion set in locate-test, then the
# end-result for modifying and/or adding tests can be achieved by merely
# rerunning this script.
#
# This script will remain around until (hopefully someday) POSIX make
# becomes less braindead.
#
# See COPYING for more details.
#
# Garrett Cooper, June 2010
#

AUTHORDATE=$(grep "Garrett Cooper" "$0" | head -n 1 | sed 's,# *,,')
export PATH="$PATH:$(dirname "$0")"

generate_locate_test_makefile() {

	local maketype=$1; shift

	echo "Generating $maketype Makefiles"

	locate-test --$maketype | sed -e 's,^./,,g' > make-gen.$maketype

	generate_makefiles make-gen.$maketype $*

	rm -f make-gen.$maketype

}

generate_makefile() {

	local make_target_prereq_cache=
	local prereq_cache=

	local makefile=$1
	local prereq_dir=$2
	local compiler_args=$3
	shift 3

	prereq_cache="$*"

	# Add all source files to $make_target_prereq_cache.
	for prereq in $prereq_cache; do 
		if echo "$prereq" | grep -q 'test$'; then
			if [ "$make_target_prereq_cache" != "" ]; then
				make_target_prereq_cache="$make_target_prereq_cache "
			fi
			make_target_prereq_cache="$make_target_prereq_cache$prereq"
		fi
	done

	if [ ! -f "$makefile.1" ]; then

		cat > "$makefile.1" <<EOF
#
# Automatically generated by $(basename "$0") -- DO NOT EDIT.
#
# Restrictions for $(basename "$0") apply to this file. See COPYING for more
# details.
#
# $AUTHORDATE
#

# Path variables.
top_srcdir?=		$(echo "$prereq_dir" | sed -E -e 's,[^/]+,\.\.,g')
subdir=			$prereq_cache_dir
srcdir=			\$(top_srcdir)/\$(subdir)

EXEC_PREFIX=		$EXEC_PREFIX
INSTALL_DIR=		\$(DESTDIR)/\$(EXEC_PREFIX)/\$(subdir)
LOGFILE?=		logfile

# Build variables
CFLAGS+=		-I\$(top_srcdir)/include

# XXX: for testfrmw.c -- needs to be moved into a library.
CFLAGS+=		-I\$(srcdir)

# Include top-level make definitions and submake make definitions.
CFLAGS+=		\`cat 2>/dev/null \$(top_srcdir)/CFLAGS\`
CFLAGS+=		\`cat 2>/dev/null \$(srcdir)/CFLAGS\`

LDFLAGS+=		\`cat 2>/dev/null \$(top_srcdir)/LDFLAGS\`
LDFLAGS+=		\`cat 2>/dev/null \$(srcdir)/LDFLAGS\`

LDLIBS+=		\`cat 2>/dev/null \$(top_srcdir)/LDLIBS\`
LDLIBS+=		\`cat 2>/dev/null \$(srcdir)/LDLIBS\`

EOF

	fi

	cat >> "$makefile.2" <<EOF
INSTALL_TARGETS+=	${prereq_cache}

MAKE_TARGETS+=		${make_target_prereq_cache}

EOF

	if [ ! -f "$makefile.3" ]; then

		cat > "$makefile.3" <<EOF
all: \$(MAKE_TARGETS)

clean:
	rm -f \$(MAKE_TARGETS) logfile* *.core

install: \$(INSTALL_DIR)
	for i in \$(INSTALL_TARGETS); do \\
		install \$\$i \$(INSTALL_DIR)/\$\$i;\\
	done

test: all
	\$(top_srcdir)/scripts/run-test.sh \$(MAKE_TARGETS)

\$(INSTALL_DIR):
	mkdir -p \$@

EOF

	fi

	# Produce _awesome_ target rules for everything that needs it.
	for prereq in ${make_target_prereq_cache}; do

		test_name=$(echo "$prereq" | sed -e "s,.$suffix,,")
		c_file="$test_name.c"

		case "$suffix" in
		run-test)
			grep -q 'main' "$prereq_dir/$c_file" || echo >&2 "$prereq_dir/$c_file should be test."
			;;
		test)
			grep -q 'main' "$prereq_dir/$c_file" && echo >&2 "$prereq_dir/$c_file should be run-test."
			;;
		esac

		COMPILE_STR="\$(CC) $compiler_args \$(CFLAGS) \$(LDFLAGS) -o \$@ \$(srcdir)/$c_file \$(LDLIBS)"

		cat >> "$makefile.3" <<EOF

$prereq: \$(srcdir)/$c_file
	@if $COMPILE_STR >logfile.\$\$\$\$ 2>&1; then \\
		 echo "$prereq_dir/$test_name compile PASSED"; \\
		 echo "$prereq_dir/$test_name compile PASSED" >> \$(LOGFILE); \\
	else \\
		 echo "$prereq_dir/$test_name compile FAILED"; \\
		(echo "$prereq_dir/$test_name compile FAILED"; cat logfile.\$\$\$\$) >> \$(LOGFILE); \\
	fi; \\
	rm -f logfile.\$\$\$\$
EOF

	done

}

generate_makefiles() {

	local prereq_cache=

	local make_gen_list=$1; shift
	local suffix=$1; shift
	local compiler_args="$@"

	while read filename; do

		prereq_dir=$(dirname "$filename")

		# First run.
		if [ "$prereq_cache_dir" = "" ] ; then
			prereq_cache_dir="$prereq_dir"
		elif [ "$prereq_cache_dir" != "$prereq_dir" ]; then

			generate_makefile "$prereq_cache_dir/Makefile" $prereq_cache_dir "$compiler_args" $prereq_cache

			# Prep for the next round..
			prereq_cache=
			prereq_cache_dir="$prereq_dir"

		fi

		# Cache the entries to punt out all of the data at
		# once for a single Makefile.
		if [ "$prereq_cache" != "" ] ; then
			prereq_cache="$prereq_cache "
		fi
		prereq_cache="$prereq_cache$(basename "$filename" | sed "s,.c\$,.$suffix,g")"

	done < $make_gen_list

	# Dump the last Makefile data cached up.
	generate_makefile "$prereq_cache_dir/Makefile" $prereq_cache_dir "$compiler_args" $prereq_cache

}

DEFAULT_PREFIX=

if uname -a | grep -i linux
then
	DEFAULT_PREFIX=/opt
else
	DEFAULT_PREFIX=/usr/local
fi

PREFIX=${PREFIX:=$DEFAULT_PREFIX/openposix_testsuite}
EXEC_PREFIX="${PREFIX}/bin"

# For the generic cases.
generate_locate_test_makefile buildonly "test" -c
generate_locate_test_makefile runnable "run-test"

find . -name Makefile.1 -exec dirname {} \; | while read dir; do
	if [ -f "$dir/Makefile.2" ]; then
		cat $dir/Makefile.1 $dir/Makefile.2 $dir/Makefile.3 > $dir/Makefile
	fi
	rm $dir/Makefile.1 $dir/Makefile.2 $dir/Makefile.3
done
