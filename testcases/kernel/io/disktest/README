Disktest Version v1.1.0

WHAT IS DISKTEST?

  Disktest performs repeated i/o accesses to disk devices or filesystems
  and optionally writes to, reads from, and verifies the data.

  There are many optional parameters that can be supplied to disktest to have
  it perform in a multitude of test cases.

  It is distributed under the GNU General Public License - See the LICENSE
  file that accompanies this distribution for more details.

CHANGES SINCE v1.0.0

  Major Changes:

    Updated performance output based on command line.  Gave one decimal in
    MB/s output.

    Rewrote -pL IO routine to show correct stats.  Now show pass count when
    using -C.

    Added dump function from command line.  Created formatted dump output for
    Data miscomare and command line.

    Modified performance statistic printing to be more accurate with respect
    to throughput and IO/s.  Added one decimal place of precision in MB/s
    calculation.

  Minor Changes:

    Code cleanup to remove the plethora if #ifdef for windows/unix functional
    differences.

    Updates to parsing routines for user input.  Added multipliers for -S and
    -s command line arguments. Forced default seeks to default if performing
    a diskcache test.

    Can now leave off filespec the full path header as it will be added based
    on -I.

WHAT Operating Systems DOES IT RUN ON?

  This code has been written to compile on Linux, AIX, and Windows.  Both
  on a 32bit and 64bit environments.  There should be no compatibility issues
  at the time of compilation or execution.

DOCUMENTATION:

  At present, the only documentation provided with disktest is the man page
  which is included with the source files as man1/disktest.1.  You can either
  install it as a man page on your system, use groff to view it if man is
  not available, or export the man page to another readable format such as
  html.

INSTALLING THE SOURCE:

  You can install the source by untaring the source tar files:

          gzip -cd disktest.<version>.tar.gz | tar xvf -

  This will create a directory in the current directory of:

          disktest.<version>

  The directory contents that should have been included in this source package
  are:

          /
          README       LICENSE      childmain.c  childmain.h
          defs.h       Getopt.c     Getopt.h     globals.c
          globals.h    main.c       main.h       Makefile
          parse.c      parse.h      sfunc.c      sfunc.h
          threading.c  threading.h  usage.c      usage.h

          man1/
          disktest.1

BUILDING THE SOURCE

  You will need a compiler for the machine that you want to build the source
  for.  There is a make file included for each OS type, which will attempt to
  use the default compiler on your system.

  If you wish, create a symbolic link to the correct Makefile for the system
  that you are compiling the code for, the following defines are used in the
  code to #ifdef code fragments:

          Windows: -D"WINDOWS"
          AIX:     -D"AIX"
          Linux:   -D"LINUX"

  This will set up the includes and typedefs correctly to support the
  different system types.

  Issue the make command:

          "make all"

  The result should be a file in the source directory that is executable with
  'disktest' as the name.

  There are other make commands defined:

          "make clean"     Will remove executable and object files only

          "make all-clean" Will remove executable, temp files, object files and
                           archives (*tar* & *zip*)

          "make distro"    Will repackage the source files

          "make install"   Will copy man page to /usr/share/man1, and binary to
                           /bim/

          "make uninstall" Will remove man page and binary out of install
                           directories.

EXECUTING

  To get started, run disktest with the -? flag:

          "disktest -?"

  This will display a simplified usage to get started.  More descriptive
  documentation is located in the man page, along with examples of executions
  and output that can give you the first look and feel of how disktest will
  receive inputs and display outputs.

SO WHAT ABOUT BUGS, FEATURES, ENHANCEMENTS?

  It is possible that there will be issues, whether they are bugs or features
  that would like to be added.  You can do a couple of things, on fix/add the
  code yourself and send it to me.  This is the fastest way to get improvements
  into the code.  You can send me a note that has a description of the problem
  and if possible the recreate setup.  I will see what I can do about getting
  these things added to the code.

  Comments are always welcome, even if it is just a note to let me know how
  well the tool is working for you.  I am also interested in comparing the
  tool to others people have used.  I would be interested in any feedback
  about the usability, data output, functionality, etc. as compared to other
  tools or testing needs.

CONTACT

  My email address is: yardleyb@us.ibm.com  (Brent Yardley)


