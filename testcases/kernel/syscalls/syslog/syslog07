#! /bin/sh

#  Copyright (c) International Business Machines  Corp., 2002
#
#  This program is free software;  you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY;  without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See
#  the GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program;  if not, write to the Free Software
#  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA

# 12/05/02  Port to bash -Robbie Williamson <robbiew@us.ibm.com>
# 02/05/03  Modified - Manoj Iyer <manjo@mail.utexas.edu> use USCTEST macros
#           fixed bugs.

##################################################################
# case 7: Test the priorities....                                #
#                                                                #
#         o Add lowest prority level i.e debug level entry to    #
#           configuration file.                                  #
#         o Send syslog messages at all levels and see whether   #
#           higher level messages are logged.                    #
##################################################################

cleanup()
{
if [ $status_flag -eq 0 ]
then
	tst_resm TPASS "higher level messages are logged."
else
	tst_resm TFAIL "higher level messages are not logged."
fi

#Restore syslog.conf
mv /etc/syslog.conf.ltpbak /etc/syslog.conf

#Restart syslog
tst_resm TINFO "Restart syslog"
/etc/init.d/syslog restart 2>&1 1>/dev/null 
sleep 2
exit $status_flag
}

syslog_case7()
{
	#set the trap to handle signals.
	trap '
		tst_resm TBROK "Testing is terminating due to a signal"
		status_flag=1
		cleanup
	' 1 2 3 6 11 15

	echo
	tst_resm TINFO "syslog: Testing the priorities ..."
	echo

	# check if syslogd command exits.
	if [ -z $(which syslogd) ]
	then
		tst_resm TBROK "syslogd no such command"
		status_flag=1
		cleanup
	fi

	# check if /etc/init/syslog script exists
	find /etc/init.d/ -name syslog 2>&1 1>/dev/null || RC=$?
	if [ $RC -ne 0 ]
	then
		tst_resm TBROK "/etc/init.d/syslog no such script"
		status_flag=1
		cleanup
	fi


	# Create the configuration file specific to this test case.
	echo "user.debug        /var/log/messages" > /etc/syslog.conf

	#Restart syslog
	tst_resm TINFO "Restart syslog"
	/etc/init.d/syslog restart 2>&1 1>/dev/null 
	sleep 2

	# Grep for the following patterns in the log file...
	# check if /var/log/maillog script exists
	find /var/log/ -name maillog 2>&1 1>/dev/null || RC=$?
	if [ $RC -ne 0 ]
	then
		tst_resm TBROK "/var/log/maillog no such log file"
		status_flag=1
		cleanup
	fi
	emerg_old=`grep -c "syslogtst: emergency log" /var/log/messages`
	alert_old=`grep -c "syslogtst: alert log" /var/log/messages`
	crit_old=`grep -c "syslogtst: critical log" /var/log/messages`
	err_old=`grep -c "syslogtst: error log" /var/log/messages`
	warning_old=`grep -c "syslogtst: warning log" /var/log/messages`
	notice_old=`grep -c "syslogtst: notice log" /var/log/messages`
	info_old=`grep -c "syslogtst: info log" /var/log/messages`
	debug_old=`grep -c "syslogtst: debug log" /var/log/messages`

	# Call syslogtst. It will send the messages of all levels.
	syslogtst 7 2>/dev/null
	if [ $? -ne 0 ]; then
		status_flag=1
		return
	fi
	sleep 2

	# check if /var/log/maillog script exists
	find /var/log/ -name maillog 2>&1 1>/dev/null || RC=$?
	if [ $RC -ne 0 ]
	then
		tst_resm TBROK "/var/log/maillog no such log file"
		status_flag=1
		cleanup
	fi
	emerg_new=`grep -c "syslogtst: emergency log" /var/log/messages`
	alert_new=`grep -c "syslogtst: alert log" /var/log/messages`
	crit_new=`grep -c "syslogtst: critical log" /var/log/messages`
	err_new=`grep -c "syslogtst: error log" /var/log/messages`
	warning_new=`grep -c "syslogtst: warning log" /var/log/messages`
	notice_new=`grep -c "syslogtst: notice log" /var/log/messages`
	info_new=`grep -c "syslogtst: info log" /var/log/messages`
	debug_new=`grep -c "syslogtst: debug log" /var/log/messages`

	emerg=$(( $emerg_new - $emerg_old ))
	alert=$(( $alert_new - $alert_old ))
	crit=$(( $crit_new - $crit_old ))
	err=$(( $err_new - $err_old ))
	warning=$(( $warning_new - $warning_old ))
	notice=$(( $notice_new - $notice_old ))
	info=$(( $info_new - $info_old ))

	if [ $emerg   -ne 1 ] || [ $alert  -ne 1 ] || [ $crit -ne 1 ] || [ $err  -ne 1 ] || \
	[ $warning -ne 1 ] || [ $notice -ne 1 ] || [ $info -ne 1 ] || [ $info -ne 1 ]; then
		status_flag=1
	fi
}

export TST_TOTAL=1
export TST_COUNT=1
export TCID=$(basename $0)

RC=0
status_flag=0

tst_resm TINFO " Test the priorities"
tst_resm TINFO " o Add lowest prority level i.e debug level entry to"
tst_resm TINFO "   configuration file."
tst_resm TINFO " o Send syslog messages at all levels and see whether"
tst_resm TINFO "   higher level messages are logged."

#Back up /etc/syslog.conf
if ! [ -a /etc/syslog.conf ]
then
        tst_resm TBROK "/etc/syslog.conf not found!"
else
    while [ -a /etc/syslog.conf.ltpbak ]  #Pause if another LTP syslog test is running
    do
      sleep 5
    done
    cp /etc/syslog.conf /etc/syslog.conf.ltpbak
fi


syslog_case7
cleanup
