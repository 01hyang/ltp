#! /bin/sh

#  Copyright (c) International Business Machines  Corp., 2002
#
#  This program is free software;  you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY;  without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See
#  the GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program;  if not, write to the Free Software
#  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA

# 12/05/02  Port to bash -Robbie Williamson <robbiew@us.ibm.com>

##################################################################
# case 10: Test setlogmask() with LOG_MASK macro.                #
#                                                                #
#         o Use setlogmask() with LOG_MASK macro to set an       #
#            individual priority level.                          #
#         o Send the message of above prority and expect it to   #
#           be logged.                                           #
#         o Send message which is at other priority level to     #
#           the one set above, which should not be logged.       #
##################################################################

syslog_case10()
{
        #set the trap to handle signals.
        trap '
                echo Testing is terminating due to a signal...
                exit 1
        ' 1 2 3 6 11 15

        echo
        echo "syslog: Testing setlogmask() with LOG_MASK macro..."
        echo

        # Create the configuration file specific to this test case.
        echo "user.debug       /var/log/messages" > /etc/syslog.conf

	#Restart syslog
	kill -1 `ps -ef | grep syslogd | grep -v grep | awk '{ print $2 }'`

        allow1=`grep -c "syslogtst:10 error level is logged" /var/log/messages`
        donot_allow1=`grep -c "syslogtst:10 warning level not to be logged" /var/log/messages`

        ./syslogtst 10 2>/dev/null
        if [[ $? -ne 0 ]]; then
                status_flag=1
                return
        fi
        sleep 2

        allow2=`grep -c "syslogtst:10 error level is logged" /var/log/messages`
        donot_allow2=`grep -c "syslogtst:10 warning level not to be logged" /var/log/messages`

        (( diff1=$allow2 - $allow1 ))
        if [[ $diff1 -ne 1 ]]; then
                echo "Expected message is not logged...."
                status_flag=1
                return
        fi

        (( diff2=$donot_allow2 - $donot_allow1 ))
        if [[ $diff2 -ne 0 ]]; then
                echo "Unexpected message is logged..."
                status_flag=1
        fi

}

echo start $0
echo "----------------------------------------------------------------"
status_flag=0
syslog_case10

#Back up syslog.conf
cp /etc/syslog.conf /etc/syslog.conf.bak10

if [ $status_flag -eq 0 ]
then
	echo
	echo $0 "PASSED"
else
	echo
	echo $0 "FAILED"
fi
echo "----------------------------------------------------------------"

#Restore syslog.conf
mv /etc/syslog.conf.bak10 /etc/syslog.conf

#Restart syslog
kill -1 `ps -ef | grep syslogd | grep -v grep | awk '{ print $2 }'`


exit $status_flag
