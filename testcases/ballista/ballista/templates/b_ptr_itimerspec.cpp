/*
   b_ptr_itimerspec.cpp   Generated by the Ballista(tm) Project data object compiler
   Copyright (C) 1998-2001  Carnegie Mellon University

   This program is free software; you can redistribute it and/or
   modify it under the terms of the GNU General Public License
   as published by the Free Software Foundation; either version 2
   of the License, or (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

   File generated Friday, December 17 at 06:06 PM CST

TITLE
   b_ptr_itimerspec.cpp
*/

//--------------------------------------------------------------------

#include <errno.h>
#include <iostream.h>
#include <stdio.h>
#include <stdlib.h>
#include <stream.h>
#include <string.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <unistd.h>

#include "b_ptr_itimerspec.h"

//--------------------------------------------------------------------


 static struct itimerspec itimerspec_temp;
//--------------------------------------------------------------------

CLASSNAME::CLASSNAME()
{
  //DIAL DECLARATIONS HERE

  //generated

   strcpy(_b_ptr_itimerspecTYPENAME,CLASS_STRING);
strcpy(_b_ptr_itimerspecINTERVAL_REALTIME,"b_ptr_itimerspec_INTERVAL_REALTIME");
strcpy(_b_ptr_itimerspecINTERVAL_GETTIME,"b_ptr_itimerspec_INTERVAL_GETTIME");
strcpy(_b_ptr_itimerspecINTERVAL_ZERO,"b_ptr_itimerspec_INTERVAL_ZERO");
strcpy(_b_ptr_itimerspecINTERVAL_NEG_ONE_NS,"b_ptr_itimerspec_INTERVAL_NEG_ONE_NS");
strcpy(_b_ptr_itimerspecINTERVAL_ILL,"b_ptr_itimerspec_INTERVAL_ILL");
strcpy(_b_ptr_itimerspecINTERVAL_NEG_ONE_SEC,"b_ptr_itimerspec_INTERVAL_NEG_ONE_SEC");
strcpy(_b_ptr_itimerspecINTERVAL_MIN,"b_ptr_itimerspec_INTERVAL_MIN");
strcpy(_b_ptr_itimerspecINTERVAL_MAX,"b_ptr_itimerspec_INTERVAL_MAX");
strcpy(_b_ptr_itimerspecINTERVAL_MIXED_1,"b_ptr_itimerspec_INTERVAL_MIXED_1");
strcpy(_b_ptr_itimerspecINTERVAL_MIXED_2,"b_ptr_itimerspec_INTERVAL_MIXED_2");
strcpy(_b_ptr_itimerspecVALUE_REALTIME,"b_ptr_itimerspec_VALUE_REALTIME");
strcpy(_b_ptr_itimerspecVALUE_GETTIME,"b_ptr_itimerspec_VALUE_GETTIME");
strcpy(_b_ptr_itimerspecVALUE_ZERO,"b_ptr_itimerspec_VALUE_ZERO");
strcpy(_b_ptr_itimerspecVALUE_NEG_ONE_NS,"b_ptr_itimerspec_VALUE_NEG_ONE_NS");
strcpy(_b_ptr_itimerspecVALUE_ILL,"b_ptr_itimerspec_VALUE_ILL");
strcpy(_b_ptr_itimerspecVALUE_NEG_ONE_SEC,"b_ptr_itimerspec_VALUE_NEG_ONE_SEC");
strcpy(_b_ptr_itimerspecVALUE_MIN,"b_ptr_itimerspec_VALUE_MIN");
strcpy(_b_ptr_itimerspecVALUE_MAX,"b_ptr_itimerspec_VALUE_MAX");
strcpy(_b_ptr_itimerspecVALUE_MIXED_1,"b_ptr_itimerspec_VALUE_MIXED_1");
strcpy(_b_ptr_itimerspecVALUE_MIXED_2,"b_ptr_itimerspec_VALUE_MIXED_2");
}

//--------------------------------------------------------------------
b_param *b_ptr_itimerspec::b_ptr_itimerspecINTERVAL_REALTIME()
{
   return &_b_ptr_itimerspecINTERVAL_REALTIME;
}

b_param *b_ptr_itimerspec::b_ptr_itimerspecINTERVAL_GETTIME()
{
   return &_b_ptr_itimerspecINTERVAL_GETTIME;
}

b_param *b_ptr_itimerspec::b_ptr_itimerspecINTERVAL_ZERO()
{
   return &_b_ptr_itimerspecINTERVAL_ZERO;
}

b_param *b_ptr_itimerspec::b_ptr_itimerspecINTERVAL_NEG_ONE_NS()
{
   return &_b_ptr_itimerspecINTERVAL_NEG_ONE_NS;
}

b_param *b_ptr_itimerspec::b_ptr_itimerspecINTERVAL_ILL()
{
   return &_b_ptr_itimerspecINTERVAL_ILL;
}

b_param *b_ptr_itimerspec::b_ptr_itimerspecINTERVAL_NEG_ONE_SEC()
{
   return &_b_ptr_itimerspecINTERVAL_NEG_ONE_SEC;
}

b_param *b_ptr_itimerspec::b_ptr_itimerspecINTERVAL_MIN()
{
   return &_b_ptr_itimerspecINTERVAL_MIN;
}

b_param *b_ptr_itimerspec::b_ptr_itimerspecINTERVAL_MAX()
{
   return &_b_ptr_itimerspecINTERVAL_MAX;
}

b_param *b_ptr_itimerspec::b_ptr_itimerspecINTERVAL_MIXED_1()
{
   return &_b_ptr_itimerspecINTERVAL_MIXED_1;
}

b_param *b_ptr_itimerspec::b_ptr_itimerspecINTERVAL_MIXED_2()
{
   return &_b_ptr_itimerspecINTERVAL_MIXED_2;
}

b_param *b_ptr_itimerspec::b_ptr_itimerspecVALUE_REALTIME()
{
   return &_b_ptr_itimerspecVALUE_REALTIME;
}

b_param *b_ptr_itimerspec::b_ptr_itimerspecVALUE_GETTIME()
{
   return &_b_ptr_itimerspecVALUE_GETTIME;
}

b_param *b_ptr_itimerspec::b_ptr_itimerspecVALUE_ZERO()
{
   return &_b_ptr_itimerspecVALUE_ZERO;
}

b_param *b_ptr_itimerspec::b_ptr_itimerspecVALUE_NEG_ONE_NS()
{
   return &_b_ptr_itimerspecVALUE_NEG_ONE_NS;
}

b_param *b_ptr_itimerspec::b_ptr_itimerspecVALUE_ILL()
{
   return &_b_ptr_itimerspecVALUE_ILL;
}

b_param *b_ptr_itimerspec::b_ptr_itimerspecVALUE_NEG_ONE_SEC()
{
   return &_b_ptr_itimerspecVALUE_NEG_ONE_SEC;
}

b_param *b_ptr_itimerspec::b_ptr_itimerspecVALUE_MIN()
{
   return &_b_ptr_itimerspecVALUE_MIN;
}

b_param *b_ptr_itimerspec::b_ptr_itimerspecVALUE_MAX()
{
   return &_b_ptr_itimerspecVALUE_MAX;
}

b_param *b_ptr_itimerspec::b_ptr_itimerspecVALUE_MIXED_1()
{
   return &_b_ptr_itimerspecVALUE_MIXED_1;
}

b_param *b_ptr_itimerspec::b_ptr_itimerspecVALUE_MIXED_2()
{
   return &_b_ptr_itimerspecVALUE_MIXED_2;
}

//--------------------------------------------------------------------
//---------------------------------------------------------------------------
//type name return method

b_param *CLASSNAME::typeName()
{
  return &_b_ptr_itimerspecTYPENAME;
}

//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
int CLASSNAME::distanceFromBase()
{
  return CLASSPARENT::distanceFromBase() +1;
}


//---------------------------------------------------------------------------
void CLASSNAME::typeList(b_param list[], int num)
{
  strcpy(list[num],(char *) typeName());
  CLASSPARENT::typeList(list,num+1);
}
//--------------------------------------------------------------------
  void *CLASSNAME::access(b_param data[])
{
  if (strcmp(data[0],(char *)typeName())!=0)
    return CLASSPARENT::access(data);

  //ACCESS CODE
b_ptr_itimerspec_interval_realtime = 0;
b_ptr_itimerspec_interval_gettime = 0;
b_ptr_itimerspec_interval_zero = 0;
b_ptr_itimerspec_interval_neg_one_ns = 0;
b_ptr_itimerspec_interval_ill = 0;
b_ptr_itimerspec_interval_neg_one_sec = 0;
b_ptr_itimerspec_interval_min = 0;
b_ptr_itimerspec_interval_max = 0;
b_ptr_itimerspec_interval_mixed_1 = 0;
b_ptr_itimerspec_interval_mixed_2 = 0;
b_ptr_itimerspec_value_realtime = 0;
b_ptr_itimerspec_value_gettime = 0;
b_ptr_itimerspec_value_zero = 0;
b_ptr_itimerspec_value_neg_one_ns = 0;
b_ptr_itimerspec_value_ill = 0;
b_ptr_itimerspec_value_neg_one_sec = 0;
b_ptr_itimerspec_value_min = 0;
b_ptr_itimerspec_value_max = 0;
b_ptr_itimerspec_value_mixed_1 = 0;
b_ptr_itimerspec_value_mixed_2 = 0;
   int dataPTR =0;


   dataPTR++;
if (strcmp(data[dataPTR],_b_ptr_itimerspecINTERVAL_REALTIME)==0)
      b_ptr_itimerspec_interval_realtime = 1;
   else if (strcmp(data[dataPTR],_b_ptr_itimerspecINTERVAL_GETTIME)==0)
      b_ptr_itimerspec_interval_gettime = 1;
   else if (strcmp(data[dataPTR],_b_ptr_itimerspecINTERVAL_ZERO)==0)
      b_ptr_itimerspec_interval_zero = 1;
   else if (strcmp(data[dataPTR],_b_ptr_itimerspecINTERVAL_NEG_ONE_NS)==0)
      b_ptr_itimerspec_interval_neg_one_ns = 1;
   else if (strcmp(data[dataPTR],_b_ptr_itimerspecINTERVAL_ILL)==0)
      b_ptr_itimerspec_interval_ill = 1;
   else if (strcmp(data[dataPTR],_b_ptr_itimerspecINTERVAL_NEG_ONE_SEC)==0)
      b_ptr_itimerspec_interval_neg_one_sec = 1;
   else if (strcmp(data[dataPTR],_b_ptr_itimerspecINTERVAL_MIN)==0)
      b_ptr_itimerspec_interval_min = 1;
   else if (strcmp(data[dataPTR],_b_ptr_itimerspecINTERVAL_MAX)==0)
      b_ptr_itimerspec_interval_max = 1;
   else if (strcmp(data[dataPTR],_b_ptr_itimerspecINTERVAL_MIXED_1)==0)
      b_ptr_itimerspec_interval_mixed_1 = 1;
   else if (strcmp(data[dataPTR],_b_ptr_itimerspecINTERVAL_MIXED_2)==0)
      b_ptr_itimerspec_interval_mixed_2 = 1;
  else
    {
      cerr<<"Error: Unknown setting for the "
          <<"INTERVAL"
          <<" dial of the data object "
          <<CLASS_STRING
          <<". "<<endl
          <<"The offending string is : "
          <<data[dataPTR]
          <<endl;
      exit(1);
    }

   dataPTR++;
if (strcmp(data[dataPTR],_b_ptr_itimerspecVALUE_REALTIME)==0)
      b_ptr_itimerspec_value_realtime = 1;
   else if (strcmp(data[dataPTR],_b_ptr_itimerspecVALUE_GETTIME)==0)
      b_ptr_itimerspec_value_gettime = 1;
   else if (strcmp(data[dataPTR],_b_ptr_itimerspecVALUE_ZERO)==0)
      b_ptr_itimerspec_value_zero = 1;
   else if (strcmp(data[dataPTR],_b_ptr_itimerspecVALUE_NEG_ONE_NS)==0)
      b_ptr_itimerspec_value_neg_one_ns = 1;
   else if (strcmp(data[dataPTR],_b_ptr_itimerspecVALUE_ILL)==0)
      b_ptr_itimerspec_value_ill = 1;
   else if (strcmp(data[dataPTR],_b_ptr_itimerspecVALUE_NEG_ONE_SEC)==0)
      b_ptr_itimerspec_value_neg_one_sec = 1;
   else if (strcmp(data[dataPTR],_b_ptr_itimerspecVALUE_MIN)==0)
      b_ptr_itimerspec_value_min = 1;
   else if (strcmp(data[dataPTR],_b_ptr_itimerspecVALUE_MAX)==0)
      b_ptr_itimerspec_value_max = 1;
   else if (strcmp(data[dataPTR],_b_ptr_itimerspecVALUE_MIXED_1)==0)
      b_ptr_itimerspec_value_mixed_1 = 1;
   else if (strcmp(data[dataPTR],_b_ptr_itimerspecVALUE_MIXED_2)==0)
      b_ptr_itimerspec_value_mixed_2 = 1;
  else
    {
      cerr<<"Error: Unknown setting for the "
          <<"VALUE"
          <<" dial of the data object "
          <<CLASS_STRING
          <<". "<<endl
          <<"The offending string is : "
          <<data[dataPTR]
          <<endl;
      exit(1);
    }

if (b_ptr_itimerspec_interval_gettime==1 || b_ptr_itimerspec_value_gettime==1)
{

 if ((timer_gettime ( TIMER_ABSTIME, &itimerspec_temp)) == -1)
 {
 FILE* logFile = NULL;
 
 if ((logFile = fopen ("/tmp/templateLog.txt","a+")) == NULL)
 {
 exit(99);
 }
 fprintf(logFile, "b_ptr_itimerspec GETTIME - error encountered timer_gettime - function not tested\n");
 fclose(logFile);
 exit(99);
 }
 
}

if (b_ptr_itimerspec_interval_realtime==1)
{

 if (clock_gettime(CLOCK_REALTIME, &(itimerspec_temp.it_interval)) == -1)
 {
 FILE* logFile = NULL;

 if ((logFile = fopen ("/tmp/templateLog.txt","a+")) == NULL)
 {
 exit(99);
 }
 fprintf(logFile, "b_ptr_itimerspec INTERVAL_REALTIME - error encountered with clock_gettime - function not tested\n");
 fclose(logFile);
 exit(99);
 }
 
}

if (b_ptr_itimerspec_interval_zero==1)
{

 itimerspec_temp.it_interval.tv_sec = 0;
 itimerspec_temp.it_interval.tv_nsec = 0; 
 
}

if (b_ptr_itimerspec_interval_neg_one_ns==1)
{

 itimerspec_temp.it_interval.tv_sec = 0; 
 itimerspec_temp.it_interval.tv_nsec = -1;
 
}

if (b_ptr_itimerspec_interval_ill==1)
{

 itimerspec_temp.it_interval.tv_sec = 0;
 itimerspec_temp.it_interval.tv_nsec = (int) 10e10;
 
}

if (b_ptr_itimerspec_interval_neg_one_sec==1)
{

 itimerspec_temp.it_interval.tv_sec = -1;
 itimerspec_temp.it_interval.tv_nsec = 0;
 
}

if (b_ptr_itimerspec_interval_min==1)
{

 itimerspec_temp.it_interval.tv_sec = -MAXLONG;
 itimerspec_temp.it_interval.tv_nsec = -MAXINT;
 
}

if (b_ptr_itimerspec_interval_max==1)
{

 itimerspec_temp.it_interval.tv_sec = MAXLONG;
 itimerspec_temp.it_interval.tv_nsec = MAXINT;
 
}

if (b_ptr_itimerspec_interval_mixed_1==1)
{

 itimerspec_temp.it_interval.tv_sec = -1;
 itimerspec_temp.it_interval.tv_nsec = 1;
 
}

if (b_ptr_itimerspec_interval_mixed_2==1)
{

 itimerspec_temp.it_interval.tv_sec = 1; 
 itimerspec_temp.it_interval.tv_nsec = -1;
 
}

if (b_ptr_itimerspec_value_realtime==1)
{

 if (clock_gettime(CLOCK_REALTIME, &(itimerspec_temp.it_value)) == -1)
 {
 FILE* logFile = NULL;

 if ((logFile = fopen ("/tmp/templateLog.txt","a+")) == NULL)
 {
 exit(99);
 }
 fprintf(logFile, "b_ptr_itimerspec VALUE_REALTIME - error encountered with clock_gettime - function not tested\n");
 fclose(logFile);
 exit(99);
 }
 
}

if (b_ptr_itimerspec_value_zero==1)
{

 itimerspec_temp.it_value.tv_sec = 0;
 itimerspec_temp.it_value.tv_nsec = 0;
 
}

if (b_ptr_itimerspec_value_neg_one_ns==1)
{

 itimerspec_temp.it_value.tv_sec = 0;
 itimerspec_temp.it_value.tv_nsec = -1;
 
}

if (b_ptr_itimerspec_value_ill==1)
{

 itimerspec_temp.it_value.tv_sec = 0;
 itimerspec_temp.it_value.tv_nsec = (int) 10e10;
 
}

if (b_ptr_itimerspec_value_neg_one_sec==1)
{

 itimerspec_temp.it_value.tv_sec = -1;
 itimerspec_temp.it_value.tv_nsec = 0;
 
}

if (b_ptr_itimerspec_value_min==1)
{

 itimerspec_temp.it_value.tv_sec = -MAXLONG; 
 itimerspec_temp.it_value.tv_nsec = -MAXINT;
 
}

if (b_ptr_itimerspec_value_max==1)
{

 itimerspec_temp.it_value.tv_sec = MAXLONG;
 itimerspec_temp.it_value.tv_nsec = MAXINT;
 
}

if (b_ptr_itimerspec_value_mixed_1==1)
{

 itimerspec_temp.it_value.tv_sec = -1;
 itimerspec_temp.it_value.tv_nsec = 1;
 
}

if (b_ptr_itimerspec_value_mixed_2==1)
{

 itimerspec_temp.it_value.tv_sec = 1; 
 itimerspec_temp.it_value.tv_nsec = -1; 
 
}

 _theVariable=&itimerspec_temp;
   return &_theVariable;
}

//--------------------------------------------------------------------
  int CLASSNAME::commit(b_param tname)
{
  if (strcmp(tname,(char *)typeName())!=0)
    return CLASSPARENT::commit(tname);
  //COMMIT CODE HERE
//generated
   return 0;
}

//--------------------------------------------------------------------
  int CLASSNAME::cleanup(b_param tname)
{
  if (strcmp(tname,(char *)typeName())!=0)
    return CLASSPARENT::cleanup(tname);
      
  //CLEANUP CODE
//generated
   return 0;
}

//--------------------------------------------------------------------
int CLASSNAME::numDials(b_param tname)
{
  if (!strcmp(tname,(char *)typeName()))
    return NUMBER_OF_DIALS;
  else return CLASSPARENT::numDials(tname);
      
}


//---------------------------------------------------------------------------
int CLASSNAME::numItems(b_param tname,int dialNumber)
{
  if (strcmp(tname,(char *)typeName())!=0)
    return CLASSPARENT::numItems(tname,dialNumber);
  switch (dialNumber)
    {
      //NUMITEMS SWITCH CASES HERE
      //generated

   case 1:
      return 10;
      break;

   case 2:
      return 10;
      break;
//---------------------------------------------------------------------------
      //end generated

    default:
      cerr<<"Error, invalid dial number passed to "
          <<CLASS_STRING<<"::numItems\n"
          <<"Please check declaration files.  Dial number passed was "
          <<dialNumber<<endl;
      exit(1);
    }
  return 0;
}

//---------------------------------------------------------------------------
b_param *CLASSNAME::paramName(b_param tname,
                                   int dialNumber,
                                   int position)

{
  if (strcmp(tname,(char *)typeName())!=0)
    return CLASSPARENT::paramName(tname,dialNumber,position);
  
  switch (dialNumber)
    {
      //PARAMNAME SWITCH CASES HERE
      //generated

case 1:
 switch (position)
   {
      case 1:
         return b_ptr_itimerspecINTERVAL_REALTIME();
         break;
      case 2:
         return b_ptr_itimerspecINTERVAL_GETTIME();
         break;
      case 3:
         return b_ptr_itimerspecINTERVAL_ZERO();
         break;
      case 4:
         return b_ptr_itimerspecINTERVAL_NEG_ONE_NS();
         break;
      case 5:
         return b_ptr_itimerspecINTERVAL_ILL();
         break;
      case 6:
         return b_ptr_itimerspecINTERVAL_NEG_ONE_SEC();
         break;
      case 7:
         return b_ptr_itimerspecINTERVAL_MIN();
         break;
      case 8:
         return b_ptr_itimerspecINTERVAL_MAX();
         break;
      case 9:
         return b_ptr_itimerspecINTERVAL_MIXED_1();
         break;
      case 10:
         return b_ptr_itimerspecINTERVAL_MIXED_2();
         break;

      default:
          cerr<<"Error, invalid position number passed to "
              <<CLASS_STRING<<"::paramName\n"
              <<"Please check declaration files.  Dial number passed was"
              <<dialNumber<<" position "<<position<<".\n";
          exit(1);
   }
   break;

case 2:
 switch (position)
   {
      case 1:
         return b_ptr_itimerspecVALUE_REALTIME();
         break;
      case 2:
         return b_ptr_itimerspecVALUE_GETTIME();
         break;
      case 3:
         return b_ptr_itimerspecVALUE_ZERO();
         break;
      case 4:
         return b_ptr_itimerspecVALUE_NEG_ONE_NS();
         break;
      case 5:
         return b_ptr_itimerspecVALUE_ILL();
         break;
      case 6:
         return b_ptr_itimerspecVALUE_NEG_ONE_SEC();
         break;
      case 7:
         return b_ptr_itimerspecVALUE_MIN();
         break;
      case 8:
         return b_ptr_itimerspecVALUE_MAX();
         break;
      case 9:
         return b_ptr_itimerspecVALUE_MIXED_1();
         break;
      case 10:
         return b_ptr_itimerspecVALUE_MIXED_2();
         break;

      default:
          cerr<<"Error, invalid position number passed to "
              <<CLASS_STRING<<"::paramName\n"
              <<"Please check declaration files.  Dial number passed was"
              <<dialNumber<<" position "<<position<<".\n";
          exit(1);
   }
   break;
    default:
      cerr<<"Error, invalid dial number passed to "
          <<CLASS_STRING<<"::paramName\n"
          <<"Please check declaration files.  Dial number passed was "
          <<dialNumber<<endl;
      exit(1);

    }
  return NULL;
}

//---------------------------------------------------------------------------
