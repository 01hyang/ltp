/*
   b_mq_attr.cpp   Generated by the Ballista(tm) Project data object compiler
   Copyright (C) 1998-2001  Carnegie Mellon University

   This program is free software; you can redistribute it and/or
   modify it under the terms of the GNU General Public License
   as published by the Free Software Foundation; either version 2
   of the License, or (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

   File generated Wednesday, July 21 at 12:09 PM CDT

TITLE
   b_mq_attr.cpp
*/

//--------------------------------------------------------------------

#include <errno.h>
#include <iostream.h>
#include <stdio.h>
#include <stdlib.h>
#include <stream.h>
#include <string.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <unistd.h>

#include "b_mq_attr.h"

//--------------------------------------------------------------------


 static mq_attr temp_mq_attr;
 static mqd_t temp_mqd;
#define QUEUE_NAME "/tmp/ballista_queue"
 //--------------------------------------------------------------------

CLASSNAME::CLASSNAME()
{
  //DIAL DECLARATIONS HERE

  //generated

   strcpy(_b_mq_attrTYPENAME,CLASS_STRING);
strcpy(_b_mq_attrQUEUE,"b_mq_attr_QUEUE");
strcpy(_b_mq_attrZERO,"b_mq_attr_ZERO");
strcpy(_b_mq_attrNONBLOCK,"b_mq_attr_NONBLOCK");
strcpy(_b_mq_attrMAX,"b_mq_attr_MAX");
strcpy(_b_mq_attrMIN,"b_mq_attr_MIN");
}

//--------------------------------------------------------------------
b_param *b_mq_attr::b_mq_attrQUEUE()
{
   return &_b_mq_attrQUEUE;
}

b_param *b_mq_attr::b_mq_attrZERO()
{
   return &_b_mq_attrZERO;
}

b_param *b_mq_attr::b_mq_attrNONBLOCK()
{
   return &_b_mq_attrNONBLOCK;
}

b_param *b_mq_attr::b_mq_attrMAX()
{
   return &_b_mq_attrMAX;
}

b_param *b_mq_attr::b_mq_attrMIN()
{
   return &_b_mq_attrMIN;
}

//--------------------------------------------------------------------
//---------------------------------------------------------------------------
//type name return method

b_param *CLASSNAME::typeName()
{
  return &_b_mq_attrTYPENAME;
}

//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
int CLASSNAME::distanceFromBase()
{
  return CLASSPARENT::distanceFromBase() +1;
}


//---------------------------------------------------------------------------
void CLASSNAME::typeList(b_param list[], int num)
{
  strcpy(list[num],(char *) typeName());
  CLASSPARENT::typeList(list,num+1);
}
//--------------------------------------------------------------------
  void *CLASSNAME::access(b_param data[])
{
  if (strcmp(data[0],(char *)typeName())!=0)
    return CLASSPARENT::access(data);

  //ACCESS CODE
b_mq_attr_queue = 0;
b_mq_attr_zero = 0;
b_mq_attr_nonblock = 0;
b_mq_attr_max = 0;
b_mq_attr_min = 0;
   int dataPTR =0;


   dataPTR++;
if (strcmp(data[dataPTR],_b_mq_attrQUEUE)==0)
      b_mq_attr_queue = 1;
   else if (strcmp(data[dataPTR],_b_mq_attrZERO)==0)
      b_mq_attr_zero = 1;
   else if (strcmp(data[dataPTR],_b_mq_attrNONBLOCK)==0)
      b_mq_attr_nonblock = 1;
   else if (strcmp(data[dataPTR],_b_mq_attrMAX)==0)
      b_mq_attr_max = 1;
   else if (strcmp(data[dataPTR],_b_mq_attrMIN)==0)
      b_mq_attr_min = 1;
  else
    {
      cerr<<"Error: Unknown setting for the "
          <<"HVAL"
          <<" dial of the data object "
          <<CLASS_STRING
          <<". "<<endl
          <<"The offending string is : "
          <<data[dataPTR]
          <<endl;
      exit(1);
    }

if (b_mq_attr_queue==1 || b_mq_attr_nonblock==1)
{

 temp_mqd = mq_open(QUEUE_NAME, O_RDWR|O_CREAT);

 FILE* logFile = NULL;
 if ((logFile = fopen ("/tmp/templateLog.txt","a+")) == NULL)
 {
 exit(99);
 }

 if (mq_getattr(temp_mqd, &temp_mq_attr) !=0)
 {
 fprintf(logFile,"Problems setting up b_mq_attr QUEUE with mq_getattr - function not tested\n");
 fclose(logFile);
 exit(99);
 }
 fclose(logFile);


}

if (b_mq_attr_zero==1)
{

 temp_mq_attr.mq_flags =0;
 temp_mq_attr.mq_maxmsg =0;
 temp_mq_attr.mq_msgsize =0;
 temp_mq_attr.mq_curmsgs =0;

}

if (b_mq_attr_max==1)
{

 temp_mq_attr.mq_flags = MAXLONG;
 temp_mq_attr.mq_maxmsg = MAXLONG;
 temp_mq_attr.mq_msgsize = MAXLONG;
 temp_mq_attr.mq_curmsgs = MAXLONG;

}

if (b_mq_attr_min==1)
{

 temp_mq_attr.mq_flags = -MAXLONG;
 temp_mq_attr.mq_maxmsg = -MAXLONG;
 temp_mq_attr.mq_msgsize = -MAXLONG;
 temp_mq_attr.mq_curmsgs = -MAXLONG;

}

if (b_mq_attr_nonblock==1)
{

 temp_mq_attr.mq_flags |= O_NONBLOCK;

}

 _theVariable = &temp_mq_attr;
   return &_theVariable;
}

//--------------------------------------------------------------------
  int CLASSNAME::commit(b_param tname)
{
  if (strcmp(tname,(char *)typeName())!=0)
    return CLASSPARENT::commit(tname);
  //COMMIT CODE HERE
//generated
   return 0;
}

//--------------------------------------------------------------------
  int CLASSNAME::cleanup(b_param tname)
{
  if (strcmp(tname,(char *)typeName())!=0)
    return CLASSPARENT::cleanup(tname);
      
  //CLEANUP CODE
//generated

if (b_mq_attr_queue==1 || b_mq_attr_nonblock==1)
{

 mq_close(temp_mqd);
 mq_unlink(QUEUE_NAME);

}
   return 0;
}

//--------------------------------------------------------------------
int CLASSNAME::numDials(b_param tname)
{
  if (!strcmp(tname,(char *)typeName()))
    return NUMBER_OF_DIALS;
  else return CLASSPARENT::numDials(tname);
      
}


//---------------------------------------------------------------------------
int CLASSNAME::numItems(b_param tname,int dialNumber)
{
  if (strcmp(tname,(char *)typeName())!=0)
    return CLASSPARENT::numItems(tname,dialNumber);
  switch (dialNumber)
    {
      //NUMITEMS SWITCH CASES HERE
      //generated

   case 1:
      return 5;
      break;
//---------------------------------------------------------------------------
      //end generated

    default:
      cerr<<"Error, invalid dial number passed to "
          <<CLASS_STRING<<"::numItems\n"
          <<"Please check declaration files.  Dial number passed was "
          <<dialNumber<<endl;
      exit(1);
    }
  return 0;
}

//---------------------------------------------------------------------------
b_param *CLASSNAME::paramName(b_param tname,
                                   int dialNumber,
                                   int position)

{
  if (strcmp(tname,(char *)typeName())!=0)
    return CLASSPARENT::paramName(tname,dialNumber,position);
  
  switch (dialNumber)
    {
      //PARAMNAME SWITCH CASES HERE
      //generated

case 1:
 switch (position)
   {
      case 1:
         return b_mq_attrQUEUE();
         break;
      case 2:
         return b_mq_attrZERO();
         break;
      case 3:
         return b_mq_attrNONBLOCK();
         break;
      case 4:
         return b_mq_attrMAX();
         break;
      case 5:
         return b_mq_attrMIN();
         break;

      default:
          cerr<<"Error, invalid position number passed to "
              <<CLASS_STRING<<"::paramName\n"
              <<"Please check declaration files.  Dial number passed was"
              <<dialNumber<<" position "<<position<<".\n";
          exit(1);
   }
   break;
    default:
      cerr<<"Error, invalid dial number passed to "
          <<CLASS_STRING<<"::paramName\n"
          <<"Please check declaration files.  Dial number passed was "
          <<dialNumber<<endl;
      exit(1);

    }
  return NULL;
}

//---------------------------------------------------------------------------
