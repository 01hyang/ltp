/*
   b_ms_flag.h   Generated by the Ballista(tm) Project data object compiler
   Copyright (C) 1998-2001  Carnegie Mellon University

   This program is free software; you can redistribute it and/or
   modify it under the terms of the GNU General Public License
   as published by the Free Software Foundation; either version 2
   of the License, or (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

   File generated Friday, December 17 at 06:07 PM CST

TITLE
   b_ms_flag.h
*/

//include control
#ifndef B_MS_FLAG_H
#define B_MS_FLAG_H
#include <errno.h>
#include <iostream.h>
#include <stdio.h>
#include <stdlib.h>
#include <stream.h>
#include <string.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <unistd.h>
#include "bTypes.h"

 #include "b_int.h"
 #include <sys/mman.h>
 #define CLASSTYPE int
#define CLASSNAME b_ms_flag
#define CLASS_STRING "b_ms_flag"
#define CLASSPARENT b_int
#define NUMBER_OF_DIALS 1


class CLASSNAME:public CLASSPARENT
{
private:
  //CLASS DIAL SETTING STRING VARIABLES
  b_param _b_ms_flagTYPENAME;
b_param _b_ms_flagASYNC;
int b_ms_flag_async;
b_param _b_ms_flagSYNC;
int b_ms_flag_sync;
b_param _b_ms_flagINVALIDATE;
int b_ms_flag_invalidate;
b_param _b_ms_flagALL;
int b_ms_flag_all;
  //TYPE VARIABLE TO SAVE VALUE FOR DESTRUCTION
  CLASSTYPE _theVariable;

 public:
  //CLASS DIAL SETTING STRING ACCESS METHODS
b_param *b_ms_flagASYNC();
b_param *b_ms_flagSYNC();
b_param *b_ms_flagINVALIDATE();
b_param *b_ms_flagALL();
  //CLASS CONSTRUCTOR
  CLASSNAME();

public:
  //Mandatory Methods
  b_param *typeName();           //returns the type of parameter
  virtual void *access(b_param data[]);
  virtual int commit(b_param tname);
  virtual int cleanup(b_param tname);
  
  virtual int numDials(b_param tname);
  virtual int numItems(b_param tname,int dialNumber);
  virtual b_param *paramName(b_param tname,int dialNumber, int position);

  virtual int distanceFromBase();
  virtual void typeList(b_param list[],int num);
  
};



#endif      //CLASSNAME_H
