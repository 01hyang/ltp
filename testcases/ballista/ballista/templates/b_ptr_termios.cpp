/*
   b_ptr_termios.cpp   Generated by the Ballista(tm) Project data object compiler
   Copyright (C) 1998-2001  Carnegie Mellon University

   This program is free software; you can redistribute it and/or
   modify it under the terms of the GNU General Public License
   as published by the Free Software Foundation; either version 2
   of the License, or (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

   File generated Friday, December 17 at 05:53 PM CST

TITLE
   b_ptr_termios.cpp
*/

//--------------------------------------------------------------------

#include <errno.h>
#include <iostream.h>
#include <stdio.h>
#include <stdlib.h>
#include <stream.h>
#include <string.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <unistd.h>

#include "b_ptr_termios.h"

//--------------------------------------------------------------------


static struct termios termios_temp;
//--------------------------------------------------------------------

CLASSNAME::CLASSNAME()
{
  //DIAL DECLARATIONS HERE

  //generated

   strcpy(_b_ptr_termiosTYPENAME,CLASS_STRING);
strcpy(_b_ptr_termiosBRKINT_SET,"b_ptr_termios_BRKINT_SET");
strcpy(_b_ptr_termiosPARMRK_SET,"b_ptr_termios_PARMRK_SET");
strcpy(_b_ptr_termiosI_MAXINT,"b_ptr_termios_I_MAXINT");
strcpy(_b_ptr_termiosI_NEGONE,"b_ptr_termios_I_NEGONE");
strcpy(_b_ptr_termiosI_ONE,"b_ptr_termios_I_ONE");
strcpy(_b_ptr_termiosI_ZERO,"b_ptr_termios_I_ZERO");
strcpy(_b_ptr_termiosOPOST_SET,"b_ptr_termios_OPOST_SET");
strcpy(_b_ptr_termiosO_MAXINT,"b_ptr_termios_O_MAXINT");
strcpy(_b_ptr_termiosO_NEGONE,"b_ptr_termios_O_NEGONE");
strcpy(_b_ptr_termiosO_ONE,"b_ptr_termios_O_ONE");
strcpy(_b_ptr_termiosO_ZERO,"b_ptr_termios_O_ZERO");
strcpy(_b_ptr_termiosCLOCAL_SET,"b_ptr_termios_CLOCAL_SET");
strcpy(_b_ptr_termiosPARENB_SET,"b_ptr_termios_PARENB_SET");
strcpy(_b_ptr_termiosPARODD_SET,"b_ptr_termios_PARODD_SET");
strcpy(_b_ptr_termiosC_MAXINT,"b_ptr_termios_C_MAXINT");
strcpy(_b_ptr_termiosC_NEGONE,"b_ptr_termios_C_NEGONE");
strcpy(_b_ptr_termiosC_ONE,"b_ptr_termios_C_ONE");
strcpy(_b_ptr_termiosC_ZERO,"b_ptr_termios_C_ZERO");
strcpy(_b_ptr_termiosECHOK_SET,"b_ptr_termios_ECHOK_SET");
strcpy(_b_ptr_termiosICANON_SET,"b_ptr_termios_ICANON_SET");
strcpy(_b_ptr_termiosIEXTEN_SET,"b_ptr_termios_IEXTEN_SET");
strcpy(_b_ptr_termiosL_MAXINT,"b_ptr_termios_L_MAXINT");
strcpy(_b_ptr_termiosL_NEGONE,"b_ptr_termios_L_NEGONE");
strcpy(_b_ptr_termiosL_ONE,"b_ptr_termios_L_ONE");
strcpy(_b_ptr_termiosL_ZERO,"b_ptr_termios_L_ZERO");
strcpy(_b_ptr_termiosCC_UNSET,"b_ptr_termios_CC_UNSET");
strcpy(_b_ptr_termiosCC_VKILL,"b_ptr_termios_CC_VKILL");
strcpy(_b_ptr_termiosCC_VMIN,"b_ptr_termios_CC_VMIN");
strcpy(_b_ptr_termiosZERO,"b_ptr_termios_ZERO");
strcpy(_b_ptr_termiosTHREE_HUNDRED,"b_ptr_termios_THREE_HUNDRED");
strcpy(_b_ptr_termiosTHREE8400,"b_ptr_termios_THREE8400");
strcpy(_b_ptr_termiosNEG1,"b_ptr_termios_NEG1");
strcpy(_b_ptr_termiosUNSET,"b_ptr_termios_UNSET");
}

//--------------------------------------------------------------------
b_param *b_ptr_termios::b_ptr_termiosBRKINT_SET()
{
   return &_b_ptr_termiosBRKINT_SET;
}

b_param *b_ptr_termios::b_ptr_termiosPARMRK_SET()
{
   return &_b_ptr_termiosPARMRK_SET;
}

b_param *b_ptr_termios::b_ptr_termiosI_MAXINT()
{
   return &_b_ptr_termiosI_MAXINT;
}

b_param *b_ptr_termios::b_ptr_termiosI_NEGONE()
{
   return &_b_ptr_termiosI_NEGONE;
}

b_param *b_ptr_termios::b_ptr_termiosI_ONE()
{
   return &_b_ptr_termiosI_ONE;
}

b_param *b_ptr_termios::b_ptr_termiosI_ZERO()
{
   return &_b_ptr_termiosI_ZERO;
}

b_param *b_ptr_termios::b_ptr_termiosOPOST_SET()
{
   return &_b_ptr_termiosOPOST_SET;
}

b_param *b_ptr_termios::b_ptr_termiosO_MAXINT()
{
   return &_b_ptr_termiosO_MAXINT;
}

b_param *b_ptr_termios::b_ptr_termiosO_NEGONE()
{
   return &_b_ptr_termiosO_NEGONE;
}

b_param *b_ptr_termios::b_ptr_termiosO_ONE()
{
   return &_b_ptr_termiosO_ONE;
}

b_param *b_ptr_termios::b_ptr_termiosO_ZERO()
{
   return &_b_ptr_termiosO_ZERO;
}

b_param *b_ptr_termios::b_ptr_termiosCLOCAL_SET()
{
   return &_b_ptr_termiosCLOCAL_SET;
}

b_param *b_ptr_termios::b_ptr_termiosPARENB_SET()
{
   return &_b_ptr_termiosPARENB_SET;
}

b_param *b_ptr_termios::b_ptr_termiosPARODD_SET()
{
   return &_b_ptr_termiosPARODD_SET;
}

b_param *b_ptr_termios::b_ptr_termiosC_MAXINT()
{
   return &_b_ptr_termiosC_MAXINT;
}

b_param *b_ptr_termios::b_ptr_termiosC_NEGONE()
{
   return &_b_ptr_termiosC_NEGONE;
}

b_param *b_ptr_termios::b_ptr_termiosC_ONE()
{
   return &_b_ptr_termiosC_ONE;
}

b_param *b_ptr_termios::b_ptr_termiosC_ZERO()
{
   return &_b_ptr_termiosC_ZERO;
}

b_param *b_ptr_termios::b_ptr_termiosECHOK_SET()
{
   return &_b_ptr_termiosECHOK_SET;
}

b_param *b_ptr_termios::b_ptr_termiosICANON_SET()
{
   return &_b_ptr_termiosICANON_SET;
}

b_param *b_ptr_termios::b_ptr_termiosIEXTEN_SET()
{
   return &_b_ptr_termiosIEXTEN_SET;
}

b_param *b_ptr_termios::b_ptr_termiosL_MAXINT()
{
   return &_b_ptr_termiosL_MAXINT;
}

b_param *b_ptr_termios::b_ptr_termiosL_NEGONE()
{
   return &_b_ptr_termiosL_NEGONE;
}

b_param *b_ptr_termios::b_ptr_termiosL_ONE()
{
   return &_b_ptr_termiosL_ONE;
}

b_param *b_ptr_termios::b_ptr_termiosL_ZERO()
{
   return &_b_ptr_termiosL_ZERO;
}

b_param *b_ptr_termios::b_ptr_termiosCC_UNSET()
{
   return &_b_ptr_termiosCC_UNSET;
}

b_param *b_ptr_termios::b_ptr_termiosCC_VKILL()
{
   return &_b_ptr_termiosCC_VKILL;
}

b_param *b_ptr_termios::b_ptr_termiosCC_VMIN()
{
   return &_b_ptr_termiosCC_VMIN;
}

b_param *b_ptr_termios::b_ptr_termiosZERO()
{
   return &_b_ptr_termiosZERO;
}

b_param *b_ptr_termios::b_ptr_termiosTHREE_HUNDRED()
{
   return &_b_ptr_termiosTHREE_HUNDRED;
}

b_param *b_ptr_termios::b_ptr_termiosTHREE8400()
{
   return &_b_ptr_termiosTHREE8400;
}

b_param *b_ptr_termios::b_ptr_termiosNEG1()
{
   return &_b_ptr_termiosNEG1;
}

b_param *b_ptr_termios::b_ptr_termiosUNSET()
{
   return &_b_ptr_termiosUNSET;
}

//--------------------------------------------------------------------
//---------------------------------------------------------------------------
//type name return method

b_param *CLASSNAME::typeName()
{
  return &_b_ptr_termiosTYPENAME;
}

//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
int CLASSNAME::distanceFromBase()
{
  return CLASSPARENT::distanceFromBase() +1;
}


//---------------------------------------------------------------------------
void CLASSNAME::typeList(b_param list[], int num)
{
  strcpy(list[num],(char *) typeName());
  CLASSPARENT::typeList(list,num+1);
}
//--------------------------------------------------------------------
  void *CLASSNAME::access(b_param data[])
{
  if (strcmp(data[0],(char *)typeName())!=0)
    return CLASSPARENT::access(data);

  //ACCESS CODE
b_ptr_termios_brkint_set = 0;
b_ptr_termios_parmrk_set = 0;
b_ptr_termios_i_maxint = 0;
b_ptr_termios_i_negone = 0;
b_ptr_termios_i_one = 0;
b_ptr_termios_i_zero = 0;
b_ptr_termios_opost_set = 0;
b_ptr_termios_o_maxint = 0;
b_ptr_termios_o_negone = 0;
b_ptr_termios_o_one = 0;
b_ptr_termios_o_zero = 0;
b_ptr_termios_clocal_set = 0;
b_ptr_termios_parenb_set = 0;
b_ptr_termios_parodd_set = 0;
b_ptr_termios_c_maxint = 0;
b_ptr_termios_c_negone = 0;
b_ptr_termios_c_one = 0;
b_ptr_termios_c_zero = 0;
b_ptr_termios_echok_set = 0;
b_ptr_termios_icanon_set = 0;
b_ptr_termios_iexten_set = 0;
b_ptr_termios_l_maxint = 0;
b_ptr_termios_l_negone = 0;
b_ptr_termios_l_one = 0;
b_ptr_termios_l_zero = 0;
b_ptr_termios_cc_unset = 0;
b_ptr_termios_cc_vkill = 0;
b_ptr_termios_cc_vmin = 0;
b_ptr_termios_zero = 0;
b_ptr_termios_three_hundred = 0;
b_ptr_termios_three8400 = 0;
b_ptr_termios_neg1 = 0;
b_ptr_termios_unset = 0;
   int dataPTR =0;


   dataPTR++;
if (strcmp(data[dataPTR],_b_ptr_termiosBRKINT_SET)==0)
      b_ptr_termios_brkint_set = 1;
   else if (strcmp(data[dataPTR],_b_ptr_termiosPARMRK_SET)==0)
      b_ptr_termios_parmrk_set = 1;
   else if (strcmp(data[dataPTR],_b_ptr_termiosI_MAXINT)==0)
      b_ptr_termios_i_maxint = 1;
   else if (strcmp(data[dataPTR],_b_ptr_termiosI_NEGONE)==0)
      b_ptr_termios_i_negone = 1;
   else if (strcmp(data[dataPTR],_b_ptr_termiosI_ONE)==0)
      b_ptr_termios_i_one = 1;
   else if (strcmp(data[dataPTR],_b_ptr_termiosI_ZERO)==0)
      b_ptr_termios_i_zero = 1;
  else
    {
      cerr<<"Error: Unknown setting for the "
          <<"C_IFLAG"
          <<" dial of the data object "
          <<CLASS_STRING
          <<". "<<endl
          <<"The offending string is : "
          <<data[dataPTR]
          <<endl;
      exit(1);
    }

   dataPTR++;
if (strcmp(data[dataPTR],_b_ptr_termiosOPOST_SET)==0)
      b_ptr_termios_opost_set = 1;
   else if (strcmp(data[dataPTR],_b_ptr_termiosO_MAXINT)==0)
      b_ptr_termios_o_maxint = 1;
   else if (strcmp(data[dataPTR],_b_ptr_termiosO_NEGONE)==0)
      b_ptr_termios_o_negone = 1;
   else if (strcmp(data[dataPTR],_b_ptr_termiosO_ONE)==0)
      b_ptr_termios_o_one = 1;
   else if (strcmp(data[dataPTR],_b_ptr_termiosO_ZERO)==0)
      b_ptr_termios_o_zero = 1;
  else
    {
      cerr<<"Error: Unknown setting for the "
          <<"C_OFLAG"
          <<" dial of the data object "
          <<CLASS_STRING
          <<". "<<endl
          <<"The offending string is : "
          <<data[dataPTR]
          <<endl;
      exit(1);
    }

   dataPTR++;
if (strcmp(data[dataPTR],_b_ptr_termiosCLOCAL_SET)==0)
      b_ptr_termios_clocal_set = 1;
   else if (strcmp(data[dataPTR],_b_ptr_termiosPARENB_SET)==0)
      b_ptr_termios_parenb_set = 1;
   else if (strcmp(data[dataPTR],_b_ptr_termiosPARODD_SET)==0)
      b_ptr_termios_parodd_set = 1;
   else if (strcmp(data[dataPTR],_b_ptr_termiosC_MAXINT)==0)
      b_ptr_termios_c_maxint = 1;
   else if (strcmp(data[dataPTR],_b_ptr_termiosC_NEGONE)==0)
      b_ptr_termios_c_negone = 1;
   else if (strcmp(data[dataPTR],_b_ptr_termiosC_ONE)==0)
      b_ptr_termios_c_one = 1;
   else if (strcmp(data[dataPTR],_b_ptr_termiosC_ZERO)==0)
      b_ptr_termios_c_zero = 1;
  else
    {
      cerr<<"Error: Unknown setting for the "
          <<"C_CFLAG"
          <<" dial of the data object "
          <<CLASS_STRING
          <<". "<<endl
          <<"The offending string is : "
          <<data[dataPTR]
          <<endl;
      exit(1);
    }

   dataPTR++;
if (strcmp(data[dataPTR],_b_ptr_termiosECHOK_SET)==0)
      b_ptr_termios_echok_set = 1;
   else if (strcmp(data[dataPTR],_b_ptr_termiosICANON_SET)==0)
      b_ptr_termios_icanon_set = 1;
   else if (strcmp(data[dataPTR],_b_ptr_termiosIEXTEN_SET)==0)
      b_ptr_termios_iexten_set = 1;
   else if (strcmp(data[dataPTR],_b_ptr_termiosL_MAXINT)==0)
      b_ptr_termios_l_maxint = 1;
   else if (strcmp(data[dataPTR],_b_ptr_termiosL_NEGONE)==0)
      b_ptr_termios_l_negone = 1;
   else if (strcmp(data[dataPTR],_b_ptr_termiosL_ONE)==0)
      b_ptr_termios_l_one = 1;
   else if (strcmp(data[dataPTR],_b_ptr_termiosL_ZERO)==0)
      b_ptr_termios_l_zero = 1;
  else
    {
      cerr<<"Error: Unknown setting for the "
          <<"C_LFLAG"
          <<" dial of the data object "
          <<CLASS_STRING
          <<". "<<endl
          <<"The offending string is : "
          <<data[dataPTR]
          <<endl;
      exit(1);
    }

   dataPTR++;
if (strcmp(data[dataPTR],_b_ptr_termiosCC_UNSET)==0)
      b_ptr_termios_cc_unset = 1;
   else if (strcmp(data[dataPTR],_b_ptr_termiosCC_VKILL)==0)
      b_ptr_termios_cc_vkill = 1;
   else if (strcmp(data[dataPTR],_b_ptr_termiosCC_VMIN)==0)
      b_ptr_termios_cc_vmin = 1;
  else
    {
      cerr<<"Error: Unknown setting for the "
          <<"C_CC"
          <<" dial of the data object "
          <<CLASS_STRING
          <<". "<<endl
          <<"The offending string is : "
          <<data[dataPTR]
          <<endl;
      exit(1);
    }

   dataPTR++;
if (strcmp(data[dataPTR],_b_ptr_termiosZERO)==0)
      b_ptr_termios_zero = 1;
   else if (strcmp(data[dataPTR],_b_ptr_termiosTHREE_HUNDRED)==0)
      b_ptr_termios_three_hundred = 1;
   else if (strcmp(data[dataPTR],_b_ptr_termiosTHREE8400)==0)
      b_ptr_termios_three8400 = 1;
   else if (strcmp(data[dataPTR],_b_ptr_termiosNEG1)==0)
      b_ptr_termios_neg1 = 1;
   else if (strcmp(data[dataPTR],_b_ptr_termiosUNSET)==0)
      b_ptr_termios_unset = 1;
  else
    {
      cerr<<"Error: Unknown setting for the "
          <<"BAUD"
          <<" dial of the data object "
          <<CLASS_STRING
          <<". "<<endl
          <<"The offending string is : "
          <<data[dataPTR]
          <<endl;
      exit(1);
    }

termios_temp.c_iflag = 0;
termios_temp.c_oflag = 0;
termios_temp.c_cflag = 0;
termios_temp.c_lflag = 0;

if (b_ptr_termios_brkint_set==1)
{
termios_temp.c_iflag |= BRKINT; 
}

if (b_ptr_termios_parmrk_set==1)
{
termios_temp.c_iflag |= PARMRK; 
}

if (b_ptr_termios_i_maxint==1)
{
termios_temp.c_iflag == MAXINT; 
}

if (b_ptr_termios_i_zero==1)
{
termios_temp.c_iflag == 0; 
}

if (b_ptr_termios_i_one==1)
{
termios_temp.c_iflag == 1; 
}

if (b_ptr_termios_i_negone==1)
{
termios_temp.c_iflag == -1; 
}

if (b_ptr_termios_opost_set==1)
{
termios_temp.c_oflag |= OPOST; 
}

if (b_ptr_termios_o_maxint==1)
{
termios_temp.c_oflag == MAXINT; 
}

if (b_ptr_termios_o_zero==1)
{
termios_temp.c_oflag == 0; 
}

if (b_ptr_termios_o_one==1)
{
termios_temp.c_oflag == 1; 
}

if (b_ptr_termios_o_negone==1)
{
termios_temp.c_oflag == -1; 
}

if (b_ptr_termios_clocal_set==1)
{
termios_temp.c_cflag |= CLOCAL; 
}

if (b_ptr_termios_parenb_set==1)
{
termios_temp.c_cflag |= PARENB; 
}

if (b_ptr_termios_parodd_set==1)
{
termios_temp.c_cflag |= PARODD; 
}

if (b_ptr_termios_c_maxint==1)
{
termios_temp.c_cflag == MAXINT; 
}

if (b_ptr_termios_c_zero==1)
{
termios_temp.c_cflag == 0; 
}

if (b_ptr_termios_c_one==1)
{
termios_temp.c_cflag == 1; 
}

if (b_ptr_termios_c_negone==1)
{
termios_temp.c_cflag == -1; 
}

if (b_ptr_termios_echok_set==1)
{
termios_temp.c_lflag |= ECHOK; 
}

if (b_ptr_termios_icanon_set==1)
{
termios_temp.c_lflag |= ICANON; 
}

if (b_ptr_termios_iexten_set==1)
{
termios_temp.c_lflag |= IEXTEN; 
}

if (b_ptr_termios_l_maxint==1)
{
termios_temp.c_lflag == MAXINT; 
}

if (b_ptr_termios_l_zero==1)
{
termios_temp.c_lflag == 0; 
}

if (b_ptr_termios_l_one==1)
{
termios_temp.c_lflag == 1; 
}

if (b_ptr_termios_l_negone==1)
{
termios_temp.c_lflag == -1; 
}

if (b_ptr_termios_cc_vkill==1)
{
termios_temp.c_cc[0] = VKILL; 
}

if (b_ptr_termios_cc_vmin==1)
{
termios_temp.c_cc[0] = VMIN; 
}

if (b_ptr_termios_zero==1)
{
if ((cfsetospeed(&termios_temp, 0))!=0){
 perror("set BAUD to 0 failed");
 exit(99);
 }
 
}

if (b_ptr_termios_three_hundred==1)
{

 if ((cfsetospeed(&termios_temp, 300))!=0){
 perror("set BAUD to 300 failed");
 exit(99);
 }
 
}

if (b_ptr_termios_three8400==1)
{

 if ((cfsetospeed(&termios_temp, 38400))!=0){
 perror("set BAUD to 38400 failed");
 exit(99);
 }
 
}

if (b_ptr_termios_neg1==1)
{

 if ((cfsetospeed(&termios_temp, -1))!=0){
 perror("set BAUD to -1 failed");
 exit(99);
 }
 
}

 _theVariable = &termios_temp;
   return &_theVariable;
}

//--------------------------------------------------------------------
  int CLASSNAME::commit(b_param tname)
{
  if (strcmp(tname,(char *)typeName())!=0)
    return CLASSPARENT::commit(tname);
  //COMMIT CODE HERE
//generated
   return 0;
}

//--------------------------------------------------------------------
  int CLASSNAME::cleanup(b_param tname)
{
  if (strcmp(tname,(char *)typeName())!=0)
    return CLASSPARENT::cleanup(tname);
      
  //CLEANUP CODE
//generated
   return 0;
}

//--------------------------------------------------------------------
int CLASSNAME::numDials(b_param tname)
{
  if (!strcmp(tname,(char *)typeName()))
    return NUMBER_OF_DIALS;
  else return CLASSPARENT::numDials(tname);
      
}


//---------------------------------------------------------------------------
int CLASSNAME::numItems(b_param tname,int dialNumber)
{
  if (strcmp(tname,(char *)typeName())!=0)
    return CLASSPARENT::numItems(tname,dialNumber);
  switch (dialNumber)
    {
      //NUMITEMS SWITCH CASES HERE
      //generated

   case 1:
      return 6;
      break;

   case 2:
      return 5;
      break;

   case 3:
      return 7;
      break;

   case 4:
      return 7;
      break;

   case 5:
      return 3;
      break;

   case 6:
      return 5;
      break;
//---------------------------------------------------------------------------
      //end generated

    default:
      cerr<<"Error, invalid dial number passed to "
          <<CLASS_STRING<<"::numItems\n"
          <<"Please check declaration files.  Dial number passed was "
          <<dialNumber<<endl;
      exit(1);
    }
  return 0;
}

//---------------------------------------------------------------------------
b_param *CLASSNAME::paramName(b_param tname,
                                   int dialNumber,
                                   int position)

{
  if (strcmp(tname,(char *)typeName())!=0)
    return CLASSPARENT::paramName(tname,dialNumber,position);
  
  switch (dialNumber)
    {
      //PARAMNAME SWITCH CASES HERE
      //generated

case 1:
 switch (position)
   {
      case 1:
         return b_ptr_termiosBRKINT_SET();
         break;
      case 2:
         return b_ptr_termiosPARMRK_SET();
         break;
      case 3:
         return b_ptr_termiosI_MAXINT();
         break;
      case 4:
         return b_ptr_termiosI_NEGONE();
         break;
      case 5:
         return b_ptr_termiosI_ONE();
         break;
      case 6:
         return b_ptr_termiosI_ZERO();
         break;

      default:
          cerr<<"Error, invalid position number passed to "
              <<CLASS_STRING<<"::paramName\n"
              <<"Please check declaration files.  Dial number passed was"
              <<dialNumber<<" position "<<position<<".\n";
          exit(1);
   }
   break;

case 2:
 switch (position)
   {
      case 1:
         return b_ptr_termiosOPOST_SET();
         break;
      case 2:
         return b_ptr_termiosO_MAXINT();
         break;
      case 3:
         return b_ptr_termiosO_NEGONE();
         break;
      case 4:
         return b_ptr_termiosO_ONE();
         break;
      case 5:
         return b_ptr_termiosO_ZERO();
         break;

      default:
          cerr<<"Error, invalid position number passed to "
              <<CLASS_STRING<<"::paramName\n"
              <<"Please check declaration files.  Dial number passed was"
              <<dialNumber<<" position "<<position<<".\n";
          exit(1);
   }
   break;

case 3:
 switch (position)
   {
      case 1:
         return b_ptr_termiosCLOCAL_SET();
         break;
      case 2:
         return b_ptr_termiosPARENB_SET();
         break;
      case 3:
         return b_ptr_termiosPARODD_SET();
         break;
      case 4:
         return b_ptr_termiosC_MAXINT();
         break;
      case 5:
         return b_ptr_termiosC_NEGONE();
         break;
      case 6:
         return b_ptr_termiosC_ONE();
         break;
      case 7:
         return b_ptr_termiosC_ZERO();
         break;

      default:
          cerr<<"Error, invalid position number passed to "
              <<CLASS_STRING<<"::paramName\n"
              <<"Please check declaration files.  Dial number passed was"
              <<dialNumber<<" position "<<position<<".\n";
          exit(1);
   }
   break;

case 4:
 switch (position)
   {
      case 1:
         return b_ptr_termiosECHOK_SET();
         break;
      case 2:
         return b_ptr_termiosICANON_SET();
         break;
      case 3:
         return b_ptr_termiosIEXTEN_SET();
         break;
      case 4:
         return b_ptr_termiosL_MAXINT();
         break;
      case 5:
         return b_ptr_termiosL_NEGONE();
         break;
      case 6:
         return b_ptr_termiosL_ONE();
         break;
      case 7:
         return b_ptr_termiosL_ZERO();
         break;

      default:
          cerr<<"Error, invalid position number passed to "
              <<CLASS_STRING<<"::paramName\n"
              <<"Please check declaration files.  Dial number passed was"
              <<dialNumber<<" position "<<position<<".\n";
          exit(1);
   }
   break;

case 5:
 switch (position)
   {
      case 1:
         return b_ptr_termiosCC_UNSET();
         break;
      case 2:
         return b_ptr_termiosCC_VKILL();
         break;
      case 3:
         return b_ptr_termiosCC_VMIN();
         break;

      default:
          cerr<<"Error, invalid position number passed to "
              <<CLASS_STRING<<"::paramName\n"
              <<"Please check declaration files.  Dial number passed was"
              <<dialNumber<<" position "<<position<<".\n";
          exit(1);
   }
   break;

case 6:
 switch (position)
   {
      case 1:
         return b_ptr_termiosZERO();
         break;
      case 2:
         return b_ptr_termiosTHREE_HUNDRED();
         break;
      case 3:
         return b_ptr_termiosTHREE8400();
         break;
      case 4:
         return b_ptr_termiosNEG1();
         break;
      case 5:
         return b_ptr_termiosUNSET();
         break;

      default:
          cerr<<"Error, invalid position number passed to "
              <<CLASS_STRING<<"::paramName\n"
              <<"Please check declaration files.  Dial number passed was"
              <<dialNumber<<" position "<<position<<".\n";
          exit(1);
   }
   break;
    default:
      cerr<<"Error, invalid dial number passed to "
          <<CLASS_STRING<<"::paramName\n"
          <<"Please check declaration files.  Dial number passed was "
          <<dialNumber<<endl;
      exit(1);

    }
  return NULL;
}

//---------------------------------------------------------------------------
