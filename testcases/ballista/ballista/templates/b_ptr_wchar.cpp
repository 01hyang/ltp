/*
   b_ptr_wchar.cpp   Generated by the Ballista(tm) Project data object compiler
   Copyright (C) 1998-2001  Carnegie Mellon University

   This program is free software; you can redistribute it and/or
   modify it under the terms of the GNU General Public License
   as published by the Free Software Foundation; either version 2
   of the License, or (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

   File generated Friday, December 17 at 06:11 PM CST

TITLE
   b_ptr_wchar.cpp
*/

//--------------------------------------------------------------------

#include <errno.h>
#include <iostream.h>
#include <stdio.h>
#include <stdlib.h>
#include <stream.h>
#include <string.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <unistd.h>

#include "b_ptr_wchar.h"

//--------------------------------------------------------------------


 static wchar_t *save_b_ptr_char=NULL;
#define sup_fillstring(buf,len,fillChar) for (int i=0; i<len; i++) buf[i] = fillChar
 //--------------------------------------------------------------------

CLASSNAME::CLASSNAME()
{
  //DIAL DECLARATIONS HERE

  //generated

   strcpy(_b_ptr_wcharTYPENAME,CLASS_STRING);
strcpy(_b_ptr_wcharS1,"b_ptr_wchar_S1");
strcpy(_b_ptr_wcharS4,"b_ptr_wchar_S4");
strcpy(_b_ptr_wcharS16,"b_ptr_wchar_S16");
strcpy(_b_ptr_wcharS8K,"b_ptr_wchar_S8K");
strcpy(_b_ptr_wcharMAX,"b_ptr_wchar_MAX");
strcpy(_b_ptr_wcharMIN,"b_ptr_wchar_MIN");
strcpy(_b_ptr_wcharCHAR,"b_ptr_wchar_CHAR");
strcpy(_b_ptr_wcharNUM,"b_ptr_wchar_NUM");
strcpy(_b_ptr_wcharTAB,"b_ptr_wchar_TAB");
strcpy(_b_ptr_wcharESC,"b_ptr_wchar_ESC");
strcpy(_b_ptr_wcharEMPTY,"b_ptr_wchar_EMPTY");
strcpy(_b_ptr_wcharSOME,"b_ptr_wchar_SOME");
strcpy(_b_ptr_wcharFULL,"b_ptr_wchar_FULL");
}

//--------------------------------------------------------------------
b_param *b_ptr_wchar::b_ptr_wcharS1()
{
   return &_b_ptr_wcharS1;
}

b_param *b_ptr_wchar::b_ptr_wcharS4()
{
   return &_b_ptr_wcharS4;
}

b_param *b_ptr_wchar::b_ptr_wcharS16()
{
   return &_b_ptr_wcharS16;
}

b_param *b_ptr_wchar::b_ptr_wcharS8K()
{
   return &_b_ptr_wcharS8K;
}

b_param *b_ptr_wchar::b_ptr_wcharMAX()
{
   return &_b_ptr_wcharMAX;
}

b_param *b_ptr_wchar::b_ptr_wcharMIN()
{
   return &_b_ptr_wcharMIN;
}

b_param *b_ptr_wchar::b_ptr_wcharCHAR()
{
   return &_b_ptr_wcharCHAR;
}

b_param *b_ptr_wchar::b_ptr_wcharNUM()
{
   return &_b_ptr_wcharNUM;
}

b_param *b_ptr_wchar::b_ptr_wcharTAB()
{
   return &_b_ptr_wcharTAB;
}

b_param *b_ptr_wchar::b_ptr_wcharESC()
{
   return &_b_ptr_wcharESC;
}

b_param *b_ptr_wchar::b_ptr_wcharEMPTY()
{
   return &_b_ptr_wcharEMPTY;
}

b_param *b_ptr_wchar::b_ptr_wcharSOME()
{
   return &_b_ptr_wcharSOME;
}

b_param *b_ptr_wchar::b_ptr_wcharFULL()
{
   return &_b_ptr_wcharFULL;
}

//--------------------------------------------------------------------
//---------------------------------------------------------------------------
//type name return method

b_param *CLASSNAME::typeName()
{
  return &_b_ptr_wcharTYPENAME;
}

//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
int CLASSNAME::distanceFromBase()
{
  return CLASSPARENT::distanceFromBase() +1;
}


//---------------------------------------------------------------------------
void CLASSNAME::typeList(b_param list[], int num)
{
  strcpy(list[num],(char *) typeName());
  CLASSPARENT::typeList(list,num+1);
}
//--------------------------------------------------------------------
  void *CLASSNAME::access(b_param data[])
{
  if (strcmp(data[0],(char *)typeName())!=0)
    return CLASSPARENT::access(data);

  //ACCESS CODE
b_ptr_wchar_s1 = 0;
b_ptr_wchar_s4 = 0;
b_ptr_wchar_s16 = 0;
b_ptr_wchar_s8k = 0;
b_ptr_wchar_max = 0;
b_ptr_wchar_min = 0;
b_ptr_wchar_char = 0;
b_ptr_wchar_num = 0;
b_ptr_wchar_tab = 0;
b_ptr_wchar_esc = 0;
b_ptr_wchar_empty = 0;
b_ptr_wchar_some = 0;
b_ptr_wchar_full = 0;
   int dataPTR =0;


   dataPTR++;
if (strcmp(data[dataPTR],_b_ptr_wcharS1)==0)
      b_ptr_wchar_s1 = 1;
   else if (strcmp(data[dataPTR],_b_ptr_wcharS4)==0)
      b_ptr_wchar_s4 = 1;
   else if (strcmp(data[dataPTR],_b_ptr_wcharS16)==0)
      b_ptr_wchar_s16 = 1;
   else if (strcmp(data[dataPTR],_b_ptr_wcharS8K)==0)
      b_ptr_wchar_s8k = 1;
  else
    {
      cerr<<"Error: Unknown setting for the "
          <<"SIZE"
          <<" dial of the data object "
          <<CLASS_STRING
          <<". "<<endl
          <<"The offending string is : "
          <<data[dataPTR]
          <<endl;
      exit(1);
    }

   dataPTR++;
if (strcmp(data[dataPTR],_b_ptr_wcharMAX)==0)
      b_ptr_wchar_max = 1;
   else if (strcmp(data[dataPTR],_b_ptr_wcharMIN)==0)
      b_ptr_wchar_min = 1;
   else if (strcmp(data[dataPTR],_b_ptr_wcharCHAR)==0)
      b_ptr_wchar_char = 1;
   else if (strcmp(data[dataPTR],_b_ptr_wcharNUM)==0)
      b_ptr_wchar_num = 1;
   else if (strcmp(data[dataPTR],_b_ptr_wcharTAB)==0)
      b_ptr_wchar_tab = 1;
   else if (strcmp(data[dataPTR],_b_ptr_wcharESC)==0)
      b_ptr_wchar_esc = 1;
  else
    {
      cerr<<"Error: Unknown setting for the "
          <<"CONTENTS"
          <<" dial of the data object "
          <<CLASS_STRING
          <<". "<<endl
          <<"The offending string is : "
          <<data[dataPTR]
          <<endl;
      exit(1);
    }

   dataPTR++;
if (strcmp(data[dataPTR],_b_ptr_wcharEMPTY)==0)
      b_ptr_wchar_empty = 1;
   else if (strcmp(data[dataPTR],_b_ptr_wcharSOME)==0)
      b_ptr_wchar_some = 1;
   else if (strcmp(data[dataPTR],_b_ptr_wcharFULL)==0)
      b_ptr_wchar_full = 1;
  else
    {
      cerr<<"Error: Unknown setting for the "
          <<"FILL"
          <<" dial of the data object "
          <<CLASS_STRING
          <<". "<<endl
          <<"The offending string is : "
          <<data[dataPTR]
          <<endl;
      exit(1);
    }

 int sizeof_wchar_t = sizeof(wchar_t);
 wchar_t fillVar;
 int divisor;
 int size;
 wchar_t *temp_b_ptr_char=NULL;
 FILE* logFile = NULL;

 if ((logFile = fopen ("/tmp/templateLog.txt","a+")) == NULL)
 {
 exit(99);
 }

if (b_ptr_wchar_s1==1)
{

 size = 1;
 temp_b_ptr_char = (wchar_t *)malloc(size * sizeof_wchar_t);
 if(temp_b_ptr_char == NULL)
 {
 fprintf(logFile,"b_ptr_char - S1 malloc failed, function not tested\n");
 fclose(logFile);
 exit(99);
 } 
 
}

if (b_ptr_wchar_s4==1)
{
 
 size = 4;
 temp_b_ptr_char = (wchar_t *)malloc(size * sizeof_wchar_t);
 if(temp_b_ptr_char == NULL)
 {
 fprintf(logFile, "b_ptr_char - S4 malloc failed, function not tested\n");
 fclose(logFile);
 exit(99);
 } 
 
}

if (b_ptr_wchar_s16==1)
{

 size = 16;
 temp_b_ptr_char = (wchar_t *)malloc(size * sizeof_wchar_t);
 if(temp_b_ptr_char == NULL)
 {
 fprintf(logFile,"b_ptr_char - S16 malloc failed, function not tested\n");
 fclose(logFile);
 exit(99);
 } 
 
}

if (b_ptr_wchar_s8k==1)
{

 size = 8192;
 temp_b_ptr_char = (wchar_t *)malloc(size * sizeof_wchar_t);
 if(temp_b_ptr_char == NULL)
 {
 fprintf(logFile,"b_ptr_char - S8K malloc failed, function not tested\n");
 fclose(logFile);
 exit(99);
 } 
 
}

if (b_ptr_wchar_char==1)
{

 fillVar = 'A';
 
}

if (b_ptr_wchar_num==1)
{

 fillVar = '1';
 
}

if (b_ptr_wchar_tab==1)
{

 fillVar = '\t';
 
}

if (b_ptr_wchar_esc==1)
{

 fillVar = '\27';
 
}

if (b_ptr_wchar_max==1)
{

 fillVar = WCHAR_MAX;
 
}

if (b_ptr_wchar_min==1)
{

 fillVar = WCHAR_MIN;
 
}

if (b_ptr_wchar_some==1)
{

 sup_fillstring(temp_b_ptr_char, (int)(size/3), fillVar);
 temp_b_ptr_char[(int)(size/3)+1]='\0';
 
}

if (b_ptr_wchar_full==1)
{

 sup_fillstring(temp_b_ptr_char, size, fillVar);
 
}

if (b_ptr_wchar_empty==1)
{

 temp_b_ptr_char[0]='\0';
 
}

 fclose(logFile);
 save_b_ptr_char = temp_b_ptr_char;
 _theVariable = temp_b_ptr_char;
   return &_theVariable;
}

//--------------------------------------------------------------------
  int CLASSNAME::commit(b_param tname)
{
  if (strcmp(tname,(char *)typeName())!=0)
    return CLASSPARENT::commit(tname);
  //COMMIT CODE HERE
//generated
   return 0;
}

//--------------------------------------------------------------------
  int CLASSNAME::cleanup(b_param tname)
{
  if (strcmp(tname,(char *)typeName())!=0)
    return CLASSPARENT::cleanup(tname);
      
  //CLEANUP CODE
//generated

 if (save_b_ptr_char !=NULL)
 {
 free(save_b_ptr_char);
 }
    return 0;
}

//--------------------------------------------------------------------
int CLASSNAME::numDials(b_param tname)
{
  if (!strcmp(tname,(char *)typeName()))
    return NUMBER_OF_DIALS;
  else return CLASSPARENT::numDials(tname);
      
}


//---------------------------------------------------------------------------
int CLASSNAME::numItems(b_param tname,int dialNumber)
{
  if (strcmp(tname,(char *)typeName())!=0)
    return CLASSPARENT::numItems(tname,dialNumber);
  switch (dialNumber)
    {
      //NUMITEMS SWITCH CASES HERE
      //generated

   case 1:
      return 4;
      break;

   case 2:
      return 6;
      break;

   case 3:
      return 3;
      break;
//---------------------------------------------------------------------------
      //end generated

    default:
      cerr<<"Error, invalid dial number passed to "
          <<CLASS_STRING<<"::numItems\n"
          <<"Please check declaration files.  Dial number passed was "
          <<dialNumber<<endl;
      exit(1);
    }
  return 0;
}

//---------------------------------------------------------------------------
b_param *CLASSNAME::paramName(b_param tname,
                                   int dialNumber,
                                   int position)

{
  if (strcmp(tname,(char *)typeName())!=0)
    return CLASSPARENT::paramName(tname,dialNumber,position);
  
  switch (dialNumber)
    {
      //PARAMNAME SWITCH CASES HERE
      //generated

case 1:
 switch (position)
   {
      case 1:
         return b_ptr_wcharS1();
         break;
      case 2:
         return b_ptr_wcharS4();
         break;
      case 3:
         return b_ptr_wcharS16();
         break;
      case 4:
         return b_ptr_wcharS8K();
         break;

      default:
          cerr<<"Error, invalid position number passed to "
              <<CLASS_STRING<<"::paramName\n"
              <<"Please check declaration files.  Dial number passed was"
              <<dialNumber<<" position "<<position<<".\n";
          exit(1);
   }
   break;

case 2:
 switch (position)
   {
      case 1:
         return b_ptr_wcharMAX();
         break;
      case 2:
         return b_ptr_wcharMIN();
         break;
      case 3:
         return b_ptr_wcharCHAR();
         break;
      case 4:
         return b_ptr_wcharNUM();
         break;
      case 5:
         return b_ptr_wcharTAB();
         break;
      case 6:
         return b_ptr_wcharESC();
         break;

      default:
          cerr<<"Error, invalid position number passed to "
              <<CLASS_STRING<<"::paramName\n"
              <<"Please check declaration files.  Dial number passed was"
              <<dialNumber<<" position "<<position<<".\n";
          exit(1);
   }
   break;

case 3:
 switch (position)
   {
      case 1:
         return b_ptr_wcharEMPTY();
         break;
      case 2:
         return b_ptr_wcharSOME();
         break;
      case 3:
         return b_ptr_wcharFULL();
         break;

      default:
          cerr<<"Error, invalid position number passed to "
              <<CLASS_STRING<<"::paramName\n"
              <<"Please check declaration files.  Dial number passed was"
              <<dialNumber<<" position "<<position<<".\n";
          exit(1);
   }
   break;
    default:
      cerr<<"Error, invalid dial number passed to "
          <<CLASS_STRING<<"::paramName\n"
          <<"Please check declaration files.  Dial number passed was "
          <<dialNumber<<endl;
      exit(1);

    }
  return NULL;
}

//---------------------------------------------------------------------------
