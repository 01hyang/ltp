/*
   b_ptr_char_id.cpp   Generated by the Ballista(tm) Project data object compiler
   Copyright (C) 1998-2001  Carnegie Mellon University

   This program is free software; you can redistribute it and/or
   modify it under the terms of the GNU General Public License
   as published by the Free Software Foundation; either version 2
   of the License, or (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

   File generated Friday, December 17 at 05:56 PM CST

TITLE
   b_ptr_char_id.cpp
*/

//--------------------------------------------------------------------

#include <errno.h>
#include <iostream.h>
#include <stdio.h>
#include <stdlib.h>
#include <stream.h>
#include <string.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <unistd.h>

#include "b_ptr_char_id.h"

//--------------------------------------------------------------------


 static char charArray[64];
 //--------------------------------------------------------------------

CLASSNAME::CLASSNAME()
{
  //DIAL DECLARATIONS HERE

  //generated

   strcpy(_b_ptr_char_idTYPENAME,CLASS_STRING);
strcpy(_b_ptr_char_idSYSTEM,"b_ptr_char_id_SYSTEM");
strcpy(_b_ptr_char_idROOT,"b_ptr_char_id_ROOT");
strcpy(_b_ptr_char_idGROUP,"b_ptr_char_id_GROUP");
strcpy(_b_ptr_char_idUSER,"b_ptr_char_id_USER");
}

//--------------------------------------------------------------------
b_param *b_ptr_char_id::b_ptr_char_idSYSTEM()
{
   return &_b_ptr_char_idSYSTEM;
}

b_param *b_ptr_char_id::b_ptr_char_idROOT()
{
   return &_b_ptr_char_idROOT;
}

b_param *b_ptr_char_id::b_ptr_char_idGROUP()
{
   return &_b_ptr_char_idGROUP;
}

b_param *b_ptr_char_id::b_ptr_char_idUSER()
{
   return &_b_ptr_char_idUSER;
}

//--------------------------------------------------------------------
//---------------------------------------------------------------------------
//type name return method

b_param *CLASSNAME::typeName()
{
  return &_b_ptr_char_idTYPENAME;
}

//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
int CLASSNAME::distanceFromBase()
{
  return CLASSPARENT::distanceFromBase() +1;
}


//---------------------------------------------------------------------------
void CLASSNAME::typeList(b_param list[], int num)
{
  strcpy(list[num],(char *) typeName());
  CLASSPARENT::typeList(list,num+1);
}
//--------------------------------------------------------------------
  void *CLASSNAME::access(b_param data[])
{
  if (strcmp(data[0],(char *)typeName())!=0)
    return CLASSPARENT::access(data);

  //ACCESS CODE
b_ptr_char_id_system = 0;
b_ptr_char_id_root = 0;
b_ptr_char_id_group = 0;
b_ptr_char_id_user = 0;
   int dataPTR =0;


   dataPTR++;
if (strcmp(data[dataPTR],_b_ptr_char_idSYSTEM)==0)
      b_ptr_char_id_system = 1;
   else if (strcmp(data[dataPTR],_b_ptr_char_idROOT)==0)
      b_ptr_char_id_root = 1;
   else if (strcmp(data[dataPTR],_b_ptr_char_idGROUP)==0)
      b_ptr_char_id_group = 1;
   else if (strcmp(data[dataPTR],_b_ptr_char_idUSER)==0)
      b_ptr_char_id_user = 1;
  else
    {
      cerr<<"Error: Unknown setting for the "
          <<"NAME"
          <<" dial of the data object "
          <<CLASS_STRING
          <<". "<<endl
          <<"The offending string is : "
          <<data[dataPTR]
          <<endl;
      exit(1);
    }

if (b_ptr_char_id_system==1)
{

 strcpy (charArray,"SYSTEM");
 
}

if (b_ptr_char_id_root==1)
{
 
 strcpy (charArray,"ROOT");
 
}

if (b_ptr_char_id_group==1)
{

 struct group* tempGroup;
 tempGroup = getgrgid(getgid());
 strncpy(charArray,tempGroup->gr_name, 63);
 
}

if (b_ptr_char_id_user==1)
{

 struct passwd* tempPasswd;
 tempPasswd = getpwuid(getuid());
 strncpy(charArray, tempPasswd->pw_name,63);
 
}

 charArray[63] = '\0';
 _theVariable = charArray;
   return &_theVariable;
}

//--------------------------------------------------------------------
  int CLASSNAME::commit(b_param tname)
{
  if (strcmp(tname,(char *)typeName())!=0)
    return CLASSPARENT::commit(tname);
  //COMMIT CODE HERE
//generated
   return 0;
}

//--------------------------------------------------------------------
  int CLASSNAME::cleanup(b_param tname)
{
  if (strcmp(tname,(char *)typeName())!=0)
    return CLASSPARENT::cleanup(tname);
      
  //CLEANUP CODE
//generated
   return 0;
}

//--------------------------------------------------------------------
int CLASSNAME::numDials(b_param tname)
{
  if (!strcmp(tname,(char *)typeName()))
    return NUMBER_OF_DIALS;
  else return CLASSPARENT::numDials(tname);
      
}


//---------------------------------------------------------------------------
int CLASSNAME::numItems(b_param tname,int dialNumber)
{
  if (strcmp(tname,(char *)typeName())!=0)
    return CLASSPARENT::numItems(tname,dialNumber);
  switch (dialNumber)
    {
      //NUMITEMS SWITCH CASES HERE
      //generated

   case 1:
      return 4;
      break;
//---------------------------------------------------------------------------
      //end generated

    default:
      cerr<<"Error, invalid dial number passed to "
          <<CLASS_STRING<<"::numItems\n"
          <<"Please check declaration files.  Dial number passed was "
          <<dialNumber<<endl;
      exit(1);
    }
  return 0;
}

//---------------------------------------------------------------------------
b_param *CLASSNAME::paramName(b_param tname,
                                   int dialNumber,
                                   int position)

{
  if (strcmp(tname,(char *)typeName())!=0)
    return CLASSPARENT::paramName(tname,dialNumber,position);
  
  switch (dialNumber)
    {
      //PARAMNAME SWITCH CASES HERE
      //generated

case 1:
 switch (position)
   {
      case 1:
         return b_ptr_char_idSYSTEM();
         break;
      case 2:
         return b_ptr_char_idROOT();
         break;
      case 3:
         return b_ptr_char_idGROUP();
         break;
      case 4:
         return b_ptr_char_idUSER();
         break;

      default:
          cerr<<"Error, invalid position number passed to "
              <<CLASS_STRING<<"::paramName\n"
              <<"Please check declaration files.  Dial number passed was"
              <<dialNumber<<" position "<<position<<".\n";
          exit(1);
   }
   break;
    default:
      cerr<<"Error, invalid dial number passed to "
          <<CLASS_STRING<<"::paramName\n"
          <<"Please check declaration files.  Dial number passed was "
          <<dialNumber<<endl;
      exit(1);

    }
  return NULL;
}

//---------------------------------------------------------------------------
