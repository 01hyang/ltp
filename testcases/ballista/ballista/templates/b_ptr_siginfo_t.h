/*
   b_ptr_siginfo_t.h   Generated by the Ballista(tm) Project data object compiler
   Copyright (C) 1998-2001  Carnegie Mellon University

   This program is free software; you can redistribute it and/or
   modify it under the terms of the GNU General Public License
   as published by the Free Software Foundation; either version 2
   of the License, or (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

   File generated Tuesday, February 17 at 02:54 PM CST

TITLE
   b_ptr_siginfo_t.h
*/

//include control
#ifndef B_PTR_SIGINFO_T_H
#define B_PTR_SIGINFO_T_H
#include <errno.h>
#include <iostream.h>
#include <stdio.h>
#include <stdlib.h>
#include <stream.h>
#include <string.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <unistd.h>
#include "bTypes.h"

#include <signal.h>
#include "b_ptr_buf.h"
#define CLASSTYPE siginfo_t*
#define CLASSNAME b_ptr_siginfo_t
#define CLASS_STRING "b_ptr_siginfo_t"
#define CLASSPARENT b_ptr_buf
#define NUMBER_OF_DIALS 2


class CLASSNAME:public CLASSPARENT
{
private:
  //CLASS DIAL SETTING STRING VARIABLES
  b_param _b_ptr_siginfo_tTYPENAME;
b_param _b_ptr_siginfo_tSIGABRT;
int b_ptr_siginfo_t_sigabrt;
b_param _b_ptr_siginfo_tSIGILL;
int b_ptr_siginfo_t_sigill;
b_param _b_ptr_siginfo_tSIGUSR1;
int b_ptr_siginfo_t_sigusr1;
b_param _b_ptr_siginfo_tSIGUSR2;
int b_ptr_siginfo_t_sigusr2;
b_param _b_ptr_siginfo_tMAXINT;
int b_ptr_siginfo_t_maxint;
b_param _b_ptr_siginfo_tMININT;
int b_ptr_siginfo_t_minint;
b_param _b_ptr_siginfo_tZERO;
int b_ptr_siginfo_t_zero;
b_param _b_ptr_siginfo_tONE;
int b_ptr_siginfo_t_one;
b_param _b_ptr_siginfo_tNEG_ONE;
int b_ptr_siginfo_t_neg_one;
b_param _b_ptr_siginfo_tSI_USER;
int b_ptr_siginfo_t_si_user;
b_param _b_ptr_siginfo_tSI_QUEUE;
int b_ptr_siginfo_t_si_queue;
b_param _b_ptr_siginfo_tSI_TIMER;
int b_ptr_siginfo_t_si_timer;
b_param _b_ptr_siginfo_tSI_ASYNCIO;
int b_ptr_siginfo_t_si_asyncio;
b_param _b_ptr_siginfo_tSI_MESGQ;
int b_ptr_siginfo_t_si_mesgq;
b_param _b_ptr_siginfo_tC_MAXINT;
int b_ptr_siginfo_t_c_maxint;
b_param _b_ptr_siginfo_tC_MININT;
int b_ptr_siginfo_t_c_minint;
b_param _b_ptr_siginfo_tC_ZERO;
int b_ptr_siginfo_t_c_zero;
b_param _b_ptr_siginfo_tC_ONE;
int b_ptr_siginfo_t_c_one;
b_param _b_ptr_siginfo_tC_NEG_ONE;
int b_ptr_siginfo_t_c_neg_one;
  //TYPE VARIABLE TO SAVE VALUE FOR DESTRUCTION
  CLASSTYPE _theVariable;

 public:
  //CLASS DIAL SETTING STRING ACCESS METHODS
b_param *b_ptr_siginfo_tSIGABRT();
b_param *b_ptr_siginfo_tSIGILL();
b_param *b_ptr_siginfo_tSIGUSR1();
b_param *b_ptr_siginfo_tSIGUSR2();
b_param *b_ptr_siginfo_tMAXINT();
b_param *b_ptr_siginfo_tMININT();
b_param *b_ptr_siginfo_tZERO();
b_param *b_ptr_siginfo_tONE();
b_param *b_ptr_siginfo_tNEG_ONE();
b_param *b_ptr_siginfo_tSI_USER();
b_param *b_ptr_siginfo_tSI_QUEUE();
b_param *b_ptr_siginfo_tSI_TIMER();
b_param *b_ptr_siginfo_tSI_ASYNCIO();
b_param *b_ptr_siginfo_tSI_MESGQ();
b_param *b_ptr_siginfo_tC_MAXINT();
b_param *b_ptr_siginfo_tC_MININT();
b_param *b_ptr_siginfo_tC_ZERO();
b_param *b_ptr_siginfo_tC_ONE();
b_param *b_ptr_siginfo_tC_NEG_ONE();
  //CLASS CONSTRUCTOR
  CLASSNAME();

public:
  //Mandatory Methods
  b_param *typeName();           //returns the type of parameter
  virtual void *access(b_param data[]);
  virtual int commit(b_param tname);
  virtual int cleanup(b_param tname);
  
  virtual int numDials(b_param tname);
  virtual int numItems(b_param tname,int dialNumber);
  virtual b_param *paramName(b_param tname,int dialNumber, int position);

  virtual int distanceFromBase();
  virtual void typeList(b_param list[],int num);
  
};



#endif      //CLASSNAME_H
